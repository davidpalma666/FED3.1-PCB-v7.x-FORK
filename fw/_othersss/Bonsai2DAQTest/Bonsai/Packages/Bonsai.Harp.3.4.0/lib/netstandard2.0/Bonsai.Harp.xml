<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.Harp</name>
    </assembly>
    <members>
        <member name="T:Bonsai.Harp.AsyncDevice">
            <summary>
            Represents an asynchronous API to configure and interface with Harp devices.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.AsyncDevice"/> class on
            the specified port.
            </summary>
            <param name="portName">The name of the serial port used to communicate with the Harp device.</param>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadHardwareVersionAsync">
            <summary>
            Asynchronously reads the hardware version of the device.
            </summary>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the hardware version of the device.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadFirmwareVersionAsync">
            <summary>
            Asynchronously reads the firmware version of the device.
            </summary>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the firmware version of the device.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadDeviceNameAsync">
            <summary>
            Asynchronously reads the display name of the device.
            </summary>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the name of the device.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadByteAsync(System.Int32)">
            <summary>
            Asynchronously reads the value of an 8-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadSByteAsync(System.Int32)">
            <summary>
            Asynchronously reads the value of an 8-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadUInt16Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 16-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadInt16Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 16-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadUInt32Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 32-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadInt32Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 32-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadUInt64Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 64-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadInt64Async(System.Int32)">
            <summary>
            Asynchronously reads the value of a 64-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.ReadSingleAsync(System.Int32)">
            <summary>
            Asynchronously reads the value of a single-precision floating point register with
            the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the value of the register.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteDeviceNameAsync(System.String)">
            <summary>
            Asynchronously updates the display name of the device.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> containing the name of the device. The maximum length
            of the specified device name is 25 characters.
            </param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteByteAsync(System.Int32,System.Byte)">
            <summary>
            Asynchronously writes a value to an 8-bit unsigned integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteByteAsync(System.Int32,System.Byte[])">
            <summary>
            Asynchronously writes an array of values to an 8-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteSByteAsync(System.Int32,System.SByte)">
            <summary>
            Asynchronously writes a value to an 8-bit signed integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteSByteAsync(System.Int32,System.SByte[])">
            <summary>
            Asynchronously writes an array of values to an 8-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt16Async(System.Int32,System.UInt16)">
            <summary>
            Asynchronously writes a value to a 16-bit unsigned integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt16Async(System.Int32,System.UInt16[])">
            <summary>
            Asynchronously writes an array of values to a 16-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt16Async(System.Int32,System.Int16)">
            <summary>
            Asynchronously writes a value to a 16-bit signed integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt16Async(System.Int32,System.Int16[])">
            <summary>
            Asynchronously writes an array of values to a 16-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt32Async(System.Int32,System.UInt32)">
            <summary>
            Asynchronously writes a value to a 32-bit unsigned integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt32Async(System.Int32,System.UInt32[])">
            <summary>
            Asynchronously writes an array of values to a 32-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt32Async(System.Int32,System.Int32)">
            <summary>
            Asynchronously writes a value to a 32-bit signed integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt32Async(System.Int32,System.Int32[])">
            <summary>
            Asynchronously writes an array of values to a 32-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt64Async(System.Int32,System.UInt64)">
            <summary>
            Asynchronously writes a value to a 64-bit unsigned integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteUInt64Async(System.Int32,System.UInt64[])">
            <summary>
            Asynchronously writes an array of values to a 64-bit unsigned integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt64Async(System.Int32,System.Int64)">
            <summary>
            Asynchronously writes a value to a 64-bit signed integer register
            with the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="value">The value to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteInt64Async(System.Int32,System.Int64[])">
            <summary>
            Asynchronously writes an array of values to a 64-bit signed integer register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.WriteSingleAsync(System.Int32,System.Single[])">
            <summary>
            Asynchronously writes a value, or an array of values, to a single-precision floating point register with
            the specified address.
            </summary>
            <param name="address">The address of the register to write.</param>
            <param name="values">The values to be stored in the register.</param>
            <returns>
            The task object representing the asynchronous write operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.CommandAsync(Bonsai.Harp.HarpMessage)">
            <summary>
            Sends a command to the Harp device and awaits the response as an asynchronous operation.
            </summary>
            <param name="command">The <see cref="T:Bonsai.Harp.HarpMessage"/> specifying the command to send.</param>
            <returns>
            The task object representing the asynchronous operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains the message representing the response of the device to the asynchronous command.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.AsyncDevice.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Bonsai.Harp.AsyncDevice"/>.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.Bootloader">
            <summary>
            Provides asynchronous operations to update a device firmware using the dedicated bootloader protocol.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Bootloader.UpdateFirmwareAsync(System.String,Bonsai.Harp.DeviceFirmware,System.IProgress{System.Int32})">
            <summary>
            Asynchronously updates the firmware of the Harp device on the specified port.
            </summary>
            <param name="portName">The name of the serial port used to communicate with the Harp device.</param>
            <param name="firmware">The binary firmware image to upload to the device.</param>
            <param name="progress">The optional <see cref="T:System.IProgress`1"/> object used to report update progress.</param>
            <returns>
            The task object representing the asynchronous firmware update operation.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.Bootloader.UpdateFirmwareAsync(System.String,Bonsai.Harp.DeviceFirmware,System.Boolean,System.IProgress{System.Int32})">
            <summary>
            Asynchronously updates the firmware of the Harp device on the specified port.
            </summary>
            <param name="portName">The name of the serial port used to communicate with the Harp device.</param>
            <param name="firmware">The binary firmware image to upload to the device.</param>
            <param name="forceUpdate">
            <b>true</b> to indicate that the firmware should be uploaded even if the device reports unsupported hardware,
            or is in bootloader mode; <b>false</b> to throw an exception if the firmware is not supported, or the device
            is in an invalid state.
            </param>
            <param name="progress">The optional <see cref="T:System.IProgress`1"/> object used to report update progress.</param>
            <returns>
            The task object representing the asynchronous firmware update operation.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.CombinatorTypeConverter">
            <summary>
            Provides a type converter to convert combinator objects to and from other representations.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.CombinatorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Harp.CommandBuilder">
            <summary>
            Provides the abstract base class for polymorphic operators used to create
            command messages for Harp devices.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CommandBuilder.Command">
            <summary>
            Gets or sets the command formatter used to create command messages.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.ConvertFromMessageBytes">
            <summary>
            Represents a transform operator which converts an observable sequence of byte arrays into a sequence of Harp messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.ConvertFromMessageBytes.Process(System.IObservable{System.Byte[]})">
            <summary>
            Converts an observable sequence of byte arrays into a sequence of Harp messages.
            Each array of bytes should contain the full binary representation of a Harp message.
            </summary>
            <param name="source">An observable sequence of byte arrays.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="T:Bonsai.Harp.CreateHarpMessage">
            <summary>
            Represents an operator which creates an observable source of Harp messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.CreateHarpMessage"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateHarpMessage.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateHarpMessage.Address">
            <summary>
            Gets or sets the address of the register.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateHarpMessage.PayloadType">
            <summary>
            Gets or sets the type of the payload data.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateHarpMessage.Payload">
            <summary>
            Gets or sets the data to write on the message payload.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate">
            <summary>
            Returns an observable sequence of Harp messages.
            </summary>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Byte})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.SByte})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.UInt16})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Int16})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.UInt32})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Int32})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.UInt64})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Int64})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Single})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="M:Bonsai.Harp.CreateHarpMessage.Generate(System.IObservable{System.Double})">
            <summary>
            Returns an observable sequence of Harp messages from the input payload.
            </summary>
            <param name="source">An observable sequence representing the input payload.</param>
            <returns>An observable sequence of Harp messages.</returns>
        </member>
        <member name="T:Bonsai.Harp.CreateMessage">
            <summary>
            Represents an operator which creates an observable source of Harp messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CreateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.CreateMessage"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateMessage.MessageType">
            <summary>
            Gets or sets the type of the Harp message.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateMessage.Address">
            <summary>
            Gets or sets the address of the register to which the Harp message refers to.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateMessage.PayloadType">
            <summary>
            Gets or sets the type of data to include in the message payload.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.CreateMessage.Payload">
            <summary>
            Gets or sets the data to write in the message payload.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CreateMessage.Generate">
            <summary>
            Returns an observable sequence that produces a Harp message whenever the payload
            property changes, starting with the initial payload value.
            </summary>
            <returns>
            An observable sequence of Harp messages containing the value of the payload property.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.CreateMessage.Generate``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that produces a Harp message with the specified
            payload value whenever the source sequence emits a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence used to generate new values.</param>
            <returns>
            An observable sequence of Harp messages containing the value of the payload property.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.CreateTimestamped">
            <summary>
            Represents an operator that creates a sequence of timestamped payload values from a
            sequence of value-timestamp pairs.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.CreateTimestamped.Process``1(System.IObservable{System.Tuple{``0,System.Double}})">
            <summary>
            Creates an observable sequence of timestamped payload values from a sequence
            of value-timestamp pairs.
            </summary>
            <typeparam name="T">The type of the value in the timestamped payload.</typeparam>
            <param name="source">
            A sequence of value-timestamp pairs, where the second element specifies the
            timestamp of the payload, in fractional seconds.
            </param>
            <returns>
            An observable sequence of timestamped payload values.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.CreateTimestamped.Process``1(System.IObservable{System.Tuple{``0,Bonsai.Harp.HarpMessage}})">
            <summary>
            Creates an observable sequence of timestamped payload values from a sequence
            of value-message pairs.
            </summary>
            <typeparam name="T">The type of the value in the timestamped payload.</typeparam>
            <param name="source">
            A sequence of value-message pairs, where the second element is a <see cref="T:Bonsai.Harp.HarpMessage"/>
            specifying the timestamp of the payload, in fractional seconds.
            </param>
            <returns>
            An observable sequence of timestamped payload values.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.Device">
            <summary>
            Represents an observable source of messages from the Harp device connected at the specified serial port.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Device.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.Device"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Device.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.Device"/> class
            accepting connections only from Harp devices with the specified
            <paramref name="whoAmI"/> identifier.
            </summary>
            <param name="whoAmI">The device identifier to match against serial connections.</param>
        </member>
        <member name="P:Bonsai.Harp.Device.DeviceState">
            <summary>
            Gets or sets the state of the device at run time.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.DumpRegisters">
            <summary>
            Gets or sets a value indicating whether the device should send the content of all registers during initialization.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.LedState">
            <summary>
            Gets or sets the state of the device LED.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.VisualIndicators">
            <summary>
            Gets or sets the state of all the visual indicators in the device.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.Heartbeat">
            <summary>
            Gets or sets a value indicating whether the Device sends the Timestamp event each second.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.IgnoreErrors">
            <summary>
            Gets or sets a value indicating whether error messages parsed during acquisition should be ignored or raise an exception.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Device.PortName">
            <summary>
            Gets or sets the name of the serial port used to communicate with the Harp device.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Device.Generate">
            <summary>
            Connects to the specified serial port and returns an observable sequence of Harp messages
            coming from the device.
            </summary>
            <returns>The observable sequence of Harp messages produced by the device.</returns>
        </member>
        <member name="M:Bonsai.Harp.Device.Generate(System.IObservable{Bonsai.Harp.HarpMessage})">
            <summary>
            Connects to the specified serial port and sends the observable sequence of Harp messages.
            The return value is an observable sequence of Harp messages coming from the device.
            </summary>
            <param name="source">An observable sequence of Harp messages to send to the device.</param>
            <returns>The observable sequence of Harp messages produced by the device.</returns>
        </member>
        <member name="T:Bonsai.Harp.DeviceCommand">
            <summary>
            Represents an operator which creates standard command messages available to all Harp devices.
            </summary>
            <seealso cref="T:Bonsai.Harp.SetTimestamp"/>
            <seealso cref="T:Bonsai.Harp.SynchronizeTimestamp"/>
            <seealso cref="T:Bonsai.Harp.OperationControl"/>
            <seealso cref="T:Bonsai.Harp.ResetDevice"/>
        </member>
        <member name="M:Bonsai.Harp.DeviceCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.DeviceCommand"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceCommand.Type">
            <summary>
            Gets or sets the type of the device command message to create.
            This property is obsolete.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceCommand.TypeSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Harp.DeviceCommand.Type"/> property should be serialized.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.DeviceCommandType">
            <summary>
            Specifies standard device commands available on all Harp devices.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceCommandType.Timestamp">
            <summary>
            Specifies that the value of the timestamp register in the Harp device should be updated.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceCommandType.SynchronizeTimestamp">
            <summary>
            Specifies that the timestamp register in the Harp device should be set to the UTC timestamp of the host.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.SetTimestamp">
            <summary>
            Represents an operator that creates a command message to set the value of
            the timestamp register in the Harp device, in whole seconds.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.SetTimestamp.Process(System.IObservable{System.UInt32})">
            <summary>
            Creates an observable sequence of command messages to set the value of the
            timestamp register in the Harp device.
            </summary>
            <param name="source">
            The sequence of timestamp values, in whole seconds, used to reset the Harp
            clock register.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Harp.HarpMessage"/> objects representing the command
            to set the value of the timestamp register in the Harp device.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.SynchronizeTimestamp">
            <summary>
            Represents an operator that creates a command message to set the value of
            the timestamp register in the Harp device to the current UTC time of the host.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.SynchronizeTimestamp.Process``1(System.IObservable{``0})">
            <summary>
            Creates an observable sequence of command messages to set the value of
            the timestamp register in the Harp device to the current UTC time of
            the host.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for creating new command
            messages.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Harp.HarpMessage"/> objects representing the command
            to set the value of the timestamp register in the Harp device.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.OperationControl">
            <summary>
            Represents an operator that creates a command message to initialize the
            operation control register in a Harp device.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.OperationControl.OperationMode">
            <summary>
            Gets or sets a value specifying the desired operation mode of the device.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.OperationControl.DumpRegisters">
            <summary>
            Gets or sets a value specifying whether the device should report the state
            of all registers following initialization.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.OperationControl.LedState">
            <summary>
            Gets or sets a value specifying whether the operation mode LED should
            report the device state.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.OperationControl.VisualIndicators">
            <summary>
            Gets or sets a value specifying whether the visual indicator LEDs in the
            device should be enabled.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.OperationControl.Heartbeat">
            <summary>
            Gets or sets a value specifying whether the device should report the
            current timestamp every second.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.OperationControl.Process``1(System.IObservable{``0})">
            <summary>
            Creates an observable sequence of command messages to initialize the
            operation control register in a Harp device.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for creating new command
            messages.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Harp.HarpMessage"/> objects representing the command
            to initialize the operation control register in a Harp device.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.ResetDevice">
            <summary>
            Represents an operator that creates a command message to reset the device
            and save non-volatile registers.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.ResetDevice.Mode">
            <summary>
            Gets or sets a value specifying the the behavior of the non-volatile
            registers when resetting the device.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.ResetDevice.Process``1(System.IObservable{``0})">
            <summary>
            Creates an observable sequence of command messages to reset the device
            and save non-volatile registers.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for creating new command
            messages.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Harp.HarpMessage"/> objects representing the command
            to reset the device and save non-volatile registers.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.DeviceEvent">
            <summary>
            Represents an operator which filters and selects specific event messages
            reported by all Harp devices.
            </summary>
            <seealso cref="T:Bonsai.Harp.Heartbeat"/>
            <seealso cref="T:Bonsai.Harp.MessageTimestamp"/>
        </member>
        <member name="M:Bonsai.Harp.DeviceEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.DeviceEvent"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceEvent.Type">
            <summary>
            Gets or sets a value specifying the type of the event message to select.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceEvent.TypeSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Harp.DeviceEvent.Type"/> property should be serialized.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.DeviceEventType">
            <summary>
            Specifies standard device events available on all Harp devices.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceEventType.Heartbeat">
            <summary>
            The periodic timing signal, reported once every second, used to synchronize Harp devices.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceEventType.MessageTimestamp">
            <summary>
            Specifies that the timestamp, in seconds, should be selected for each input event.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.Heartbeat">
            <summary>
            Represents an operator that filters and selects the current time of the device,
            reported once every second after synchronizing with the periodic timing signal.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Heartbeat.Process(System.IObservable{Bonsai.Harp.HarpMessage})">
            <summary>
            Filters and selects the current time of the device, reported once every
            second after synchronizing with the periodic timing signal.
            </summary>
            <param name="source">The sequence of Harp event messages.</param>
            <returns>
            A sequence of 32-bit unsigned integers representing the whole
            part of the device timestamp, in seconds.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.MessageTimestamp">
            <summary>
            Represents an operator that selects the timestamp, in seconds, for each
            event message in the source sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.MessageTimestamp.Process(System.IObservable{Bonsai.Harp.HarpMessage})">
            <summary>
            Selects the timestamp, in seconds, for each event message in the
            source sequence.
            </summary>
            <param name="source">The sequence of Harp event messages.</param>
            <returns>
            A sequence of double precision floating-point values representing
            the message timestamp, in whole and fractional seconds.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.DeviceFirmware">
            <summary>
            Represents a hardware control firmware image which can be uploaded into a Harp device.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceFirmware.Metadata">
            <summary>
            Gets information about the firmware version and supported devices on which it can be installed.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.DeviceFirmware.Data">
            <summary>
            Gets the binary representation of the firmware to be installed on the device.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.DeviceFirmware.FromFile(System.String)">
            <summary>
            Creates a <see cref="T:Bonsai.Harp.DeviceFirmware"/> object from the specified file in Intel HEX format
            using the default page size.
            </summary>
            <param name="path">The name of the file from which to create the <see cref="T:Bonsai.Harp.DeviceFirmware"/>.</param>
            <returns>
            A new <see cref="T:Bonsai.Harp.DeviceFirmware"/> object representing the extracted binary firware blob,
            together with the metadata extracted from the firmware file name.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.DeviceFirmware.FromFile(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:Bonsai.Harp.DeviceFirmware"/> object from the specified file in Intel HEX format
            and a specified page size.
            </summary>
            <param name="path">The name of the file from which to create the <see cref="T:Bonsai.Harp.DeviceFirmware"/>.</param>
            <param name="pageSize">The size of the memory blocks used to upload the device firmware.</param>
            <returns>
            A new <see cref="T:Bonsai.Harp.DeviceFirmware"/> object representing the extracted binary firware blob,
            together with the metadata extracted from the firmware file name.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.DeviceFirmware.FromStream(System.String,System.IO.Stream,System.Int32)">
            <summary>
            Creates a <see cref="T:Bonsai.Harp.DeviceFirmware"/> object extracted from the specified ASCII
            stream in Intel HEX format, the specified metadata string and page size.
            </summary>
            <param name="metadata">The firmware metadata encoded in a text string representation.</param>
            <param name="stream">The ASCII stream in Intel HEX format from which to extract the device firmware.</param>
            <param name="pageSize">The size of the memory blocks used to upload the device firmware.</param>
            <returns>
            A new <see cref="T:Bonsai.Harp.DeviceFirmware"/> object representing the extracted binary firware blob,
            together with the metadata extracted from the firmware file name.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.DeviceRegisters">
            <summary>
            Provides address and payload types for common registers and operation control
            of all Harp devices.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.WhoAmI">
            <summary>
            The address of the WHO_AM_I register used to verify the identity class of
            the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.HardwareVersionHigh">
            <summary>
            The address of the HW_VERSION_H register containing the major hardware
            version of the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.HardwareVersionLow">
            <summary>
            The address of the HW_VERSION_L register containing the minor hardware
            version of the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.AssemblyVersion">
            <summary>
            The address of the ASSEMBLY_VERSION register containing the version of
            the assembled components in the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.CoreVersionHigh">
            <summary>
            The address of the HARP_VERSION_H register containing the major version
            of the Harp core used by the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.CoreVersionLow">
            <summary>
            The address of the HARP_VERSION_L register containing the minor version
            of the Harp core used by the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.FirmwareVersionHigh">
            <summary>
            The address of the FW_VERSION_H register containing the major firmware
            version installed in the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.FirmwareVersionLow">
            <summary>
            The address of the FW_VERSION_L register containing the minor firmware
            version installed in the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.TimestampSecond">
            <summary>
            The address of the TIMESTAMP_SECOND register containing the integral part of
            the system timestamp, in seconds. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.TimestampMicrosecond">
            <summary>
            The address of the TIMESTAMP_MICRO register containing the fractional part of
            the system timestamp, in microseconds. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.OperationControl">
            <summary>
            The address of the OPERATION_CTRL register containing the configuration of the
            operation mode of the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.ResetDevice">
            <summary>
            The address of the RESET_DEV register used to reset the device and save
            non-volatile registers. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.DeviceName">
            <summary>
            The address of the DEVICE_NAME register containing the user configurable name
            for the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.SerialNumber">
            <summary>
            The address of the SERIAL_NUMBER register containing the unique serial number
            of the device. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.WhoAmIPayload">
            <summary>
            The payload type of the WHO_AM_I register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.HardwareVersionHighPayload">
            <summary>
            The payload type of the HW_VERSION_H register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.HardwareVersionLowPayload">
            <summary>
            The payload type of the HW_VERSION_L register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.AssemblyVersionPayload">
            <summary>
            The payload type of the ASSEMBLY_VERSION register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.CoreVersionHighPayload">
            <summary>
            The payload type of the HARP_VERSION_H register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.CoreVersionLowPayload">
            <summary>
            The payload type of the HARP_VERSION_L register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.FirmwareVersionHighPayload">
            <summary>
            The payload type of the FW_VERSION_H register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.FirmwareVersionLowPayload">
            <summary>
            The payload type of the FW_VERSION_L register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.TimestampSecondPayload">
            <summary>
            The payload type of the TIMESTAMP_SECOND register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.TimestampMicrosecondPayload">
            <summary>
            The payload type of the TIMESTAMP_MICRO register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.ResetDevicePayload">
            <summary>
            The payload type of the RESET_DEV register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.OperationControlPayload">
            <summary>
            The payload type of the OPERATION_CTRL register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.DeviceNamePayload">
            <summary>
            The payload type of the DEVICE_NAME register. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceRegisters.SerialNumberPayload">
            <summary>
            The payload type of the SERIAL_NUMBER register. This field is read-only.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.DeviceState">
            <summary>
            Specifies the desired state of the device after initialization.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceState.Active">
            <summary>
            Specifies that the device should be active and acquiring data immediately following initialization.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.DeviceState.Standby">
            <summary>
            Specifies that the device should be on standby without acquiring data immediately following initialization.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.DeviceTypeDescriptionProvider`1">
            <summary>
            Provides dynamic device description data based on a private or internal <c>Description</c> property.
            As long as such a property exists, this type description provider will use it to override the default
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> of the class.
            </summary>
            <typeparam name="TElement">The type of the element on which the attribute is applied.</typeparam>
        </member>
        <member name="M:Bonsai.Harp.DeviceTypeDescriptionProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.DeviceTypeDescriptionProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.DeviceTypeDescriptionProvider`1.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the type descriptor.</param>
            <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.</returns>
        </member>
        <member name="T:Bonsai.Harp.EnableType">
            <summary>
            Specifies whether a specific register is enabled or disabled.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.EnableType.Enable">
            <summary>
            Specifies that the register is enabled.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.EnableType.Disable">
            <summary>
            Specifies that the register is disabled.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.EventBuilder">
            <summary>
            Provides the abstract base class for polymorphic operators used to filter
            and parse event messages from Harp devices.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.EventBuilder.Event">
            <summary>
            Gets or sets the event parser used to filter and select event messages
            reported by the device.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.FileDevice">
            <summary>
            Represents an operator which produces an observable sequence of Harp messages from a previously recorded data file.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FileDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.FileDevice"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FileDevice.FileName">
            <summary>
            Gets or sets the path to the binary file containing Harp messages to playback.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FileDevice.IgnoreErrors">
            <summary>
            Gets or sets a value indicating whether to ignore any device error messages included in the binary file.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FileDevice.PlaybackRate">
            <summary>
            Gets or sets the optional rate multiplier to either slowdown or speedup the playback. If
            no rate is specified, playback will be done as fast as possible.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FileDevice.Generate">
            <summary>
            Opens the specified file name and returns the observable sequence of Harp messages
            stored in the binary file.
            </summary>
            <returns>The observable sequence of Harp messages stored in the binary file.</returns>
        </member>
        <member name="T:Bonsai.Harp.FilterHarpMessage">
            <summary>
            Represents an operator which filters a sequence of Harp messages for elements that match the specified address and message type.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FilterHarpMessage.Address">
            <summary>
            Gets or sets the desired message address. This parameter is optional.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FilterHarpMessage.MessageType">
            <summary>
            Gets or sets the desired type of the message. This parameter is optional.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FilterHarpMessage.Process(System.IObservable{Bonsai.Harp.HarpMessage})">
            <summary>
            Returns an observable sequence of Harp messages matching the specified address and message type.
            </summary>
            <param name="source">An observable sequence of Harp messages.</param>
            <returns>
            An observable sequence of Harp messages matching the specified address and message type. If
            <c>Address</c> or <c>MessageType</c> are <c>null</c>, any address or message type, respectively,
            are accepted.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.FilterMessage">
            <summary>
            Represents an operator which filters a sequence of Harp messages for elements that match the specified address and message type.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FilterMessage.Address">
            <summary>
            Gets or sets the desired message address. This parameter is optional.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FilterMessage.MessageType">
            <summary>
            Gets or sets the desired type of the message. This parameter is optional.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FilterMessage.Process(System.IObservable{Bonsai.Harp.HarpMessage})">
            <summary>
            Returns an observable sequence of Harp messages matching the specified address and message type.
            </summary>
            <param name="source">An observable sequence of Harp messages.</param>
            <returns>
            An observable sequence of Harp messages matching the specified address and message type. If
            <c>Address</c> or <c>MessageType</c> are <c>null</c>, any address or message type, respectively,
            are accepted.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.FirmwareMetadata">
            <summary>
            Represents information about the device, firmware version and hardware version numbers
            contained in a particular device or hex file.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.#ctor(System.String,Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.FirmwareMetadata"/> class with the
            specified device name, the firmware version and compatible hardware versions.
            </summary>
            <param name="deviceName">The unique identifier of the device type on which the firmware should be installed.</param>
            <param name="firmwareVersion">The version of the firmware contained in the device or hex file.</param>
            <param name="coreVersion">The version of the Harp core implemented by the firmware.</param>
            <param name="hardwareVersion">The hardware version of the device, or range of hardware versions supported by the firmware.</param>
            <param name="assemblyVersion">The board assembly version of the device, or range of assembly versions supported by the firmware.</param>
            <param name="prereleaseVersion">The optional prerelease number, for preview versions of the firmware.</param>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.DeviceName">
            <summary>
            Gets the unique identifier of the device type on which the firmware should be installed.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.FirmwareVersion">
            <summary>
            Gets the version of the firmware contained in the device or hex file.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.CoreVersion">
            <summary>
            Gets the version of the Harp core implemented by the firmware.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.HardwareVersion">
            <summary>
            Gets the hardware version of the device, or range of hardware versions supported by the firmware.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.AssemblyVersion">
            <summary>
            Gets the board assembly version of the device, or range of assembly versions supported by the firmware.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.FirmwareMetadata.PrereleaseVersion">
            <summary>
            Gets the optional prerelease number, for preview versions of the firmware.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.Supports(System.String,Bonsai.Harp.HarpVersion,System.Int32)">
            <summary>
            Returns whether the firmware supports the specified hardware version
            and board assembly number.
            </summary>
            <param name="deviceName">The identifier of the device to check for compatibility.</param>
            <param name="hardwareVersion">The hardware version to check for compatibility.</param>
            <param name="assemblyVersion">The optional board assembly version to check for compatibility.</param>
            <returns>
            <b>true</b> if the firmware supports the specified <paramref name="hardwareVersion"/> and
            <paramref name="assemblyVersion"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current metadata.
            </summary>
            <param name="obj">The object to compare with the current metadata.</param>
            <returns>
            <b>true</b> if the specified object is equal to the current metadata;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.Equals(Bonsai.Harp.FirmwareMetadata)">
            <summary>
            Determines whether the specified metadata object is equal to the current metadata.
            </summary>
            <param name="other">The metadata object to compare with the current metadata.</param>
            <returns>
            <b>true</b> if the specified metadata object is equal to the current metadata;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.GetHashCode">
            <summary>
            Computes the hash code for the current metadata object.
            </summary>
            <returns>
            The hash code for the current metadata object, extracted from a combination
            of hashes for the device name and various version numbers.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.op_Equality(Bonsai.Harp.FirmwareMetadata,Bonsai.Harp.FirmwareMetadata)">
            <summary>
            Determines whether the values on both sides of the equality operator
            are equal.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is equal
            to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.op_Inequality(Bonsai.Harp.FirmwareMetadata,Bonsai.Harp.FirmwareMetadata)">
            <summary>
            Determines whether the values on both sides of the inequality operator
            are not equal.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is not equal
            to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.Parse(System.String)">
            <summary>
            Converts a string representation of the <see cref="T:Bonsai.Harp.FirmwareMetadata"/> to its
            equivalent value.
            </summary>
            <param name="input">The string representing the <see cref="T:Bonsai.Harp.FirmwareMetadata"/>.</param>
            <returns>The equivalent <see cref="T:Bonsai.Harp.FirmwareMetadata"/> object for the specified string representation.</returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.TryParse(System.String,Bonsai.Harp.FirmwareMetadata@)">
            <summary>
            Converts a string representation of the <see cref="T:Bonsai.Harp.FirmwareMetadata"/> to its
            equivalent value. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string representing the <see cref="T:Bonsai.Harp.FirmwareMetadata"/>.</param>
            <param name="metadata">
            When this method returns, contains the equivalent <see cref="T:Bonsai.Harp.FirmwareMetadata"/> object
            for the specified string representation if the conversion was successful;
            otherwise, contains <b>null</b>.
            </param>
            <returns><b>true</b> if the conversion was successful; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Bonsai.Harp.FirmwareMetadata.ToString">
            <summary>
            Converts the <see cref="T:Bonsai.Harp.FirmwareMetadata"/> object to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the <see cref="T:Bonsai.Harp.FirmwareMetadata"/> object.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.Format">
            <summary>
            Represents an operator which formats input data as a Harp message payload.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.Format"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Format.MessageType">
            <summary>
            Gets or sets the type of the Harp message.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Format.Address">
            <summary>
            Gets or sets the address of the register to which the Harp message refers to.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Format.PayloadType">
            <summary>
            Gets or sets the type of data to include in the message payload.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Format.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that specifies how a valid Harp message is created from the input data.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that maps the input parameter to the
            valid Harp message.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.HarpCombinatorBuilder">
            <summary>
            Provides the abstract base class for polymorphic operators used to manipulate
            command and event messages for Harp devices.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpCombinatorBuilder.ArgumentRange">
            <inheritdoc/>
        </member>
        <member name="P:Bonsai.Harp.HarpCombinatorBuilder.Combinator">
            <summary>
            Gets or sets the combinator instance used to process command and
            event messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpCombinatorBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Harp.HarpCommand">
            <summary>
            Provides static methods for creating Harp command messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.OperationControl(Bonsai.Harp.DeviceState,Bonsai.Harp.LedState,Bonsai.Harp.LedState,Bonsai.Harp.EnableType,Bonsai.Harp.EnableType,System.Boolean)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> command to initialize the device operation control register.
            </summary>
            <param name="operationMode">The desired operation mode of the device.</param>
            <param name="ledState">Specifies whether the operation mode LED should report the device state.</param>
            <param name="visualIndicators">Specifies whether any visual indicator LEDs should be enabled on the Harp device.</param>
            <param name="heartbeat">Specifies whether to enable or disable the heartbeat register.</param>
            <param name="replies">Specifies whether write commands should report back the state of the register.</param>
            <param name="dumpRegisters">Specifies whether the state of all registers should be reported after initialization.</param>
            <returns>A valid <see cref="T:Bonsai.Harp.HarpMessage"/> command to set the device operation mode.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ResetDevice(Bonsai.Harp.ResetMode)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> command to reset the device and restore or save non-volatile registers.
            </summary>
            <param name="resetMode">Specifies whether to restore or save non-volatile registers.</param>
            <returns>A valid <see cref="T:Bonsai.Harp.HarpMessage"/> command to reset the device.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.Read(System.Int32,Bonsai.Harp.PayloadType)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for the specified address and payload type.
            </summary>
            <param name="address">The address of the register to read.</param>
            <param name="payloadType">The type of data available in the register.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command with the specified address and payload type.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadByte(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for an 8-bit unsigned integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for an 8-bit unsigned integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadSByte(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for an 8-bit signed integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for an 8-bit signed integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadUInt16(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 16-bit unsigned integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 16-bit unsigned integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadInt16(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 16-bit signed integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 16-bit signed integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadUInt32(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 32-bit unsigned integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 32-bit unsigned integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadInt32(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 32-bit signed integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 32-bit signed integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadUInt64(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 64-bit unsigned integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 64-bit unsigned integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadInt64(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 64-bit signed integer
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a 64-bit signed integer
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.ReadSingle(System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a single-precision floating point
            register with the specified address.
            </summary>
            <param name="address">The address of the register to read.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> read command for a single-precision floating point
            register with the specified address.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.Write(System.Int32,Bonsai.Harp.PayloadType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">The raw binary representation of the payload data.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.Write(System.Int32,Bonsai.Harp.PayloadType,System.ArraySegment{System.Byte})">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and payload
            data stored in the specified array segment.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">
            An array segment containing the raw binary representation of the payload data.
            </param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteByte(System.Int32,System.Byte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 8-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteByte(System.Int32,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 8-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteSByte(System.Int32,System.SByte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 8-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteSByte(System.Int32,System.SByte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 8-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt16(System.Int32,System.UInt16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 16-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt16(System.Int32,System.UInt16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 16-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 16-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt16(System.Int32,System.Int16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 16-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt32(System.Int32,System.UInt32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 32-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt32(System.Int32,System.UInt32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 32-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 32-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt32(System.Int32,System.Int32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 32-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt64(System.Int32,System.UInt64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 64-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteUInt64(System.Int32,System.UInt64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 64-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and a
            single value 64-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteInt64(System.Int32,System.Int64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of 64-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpCommand.WriteSingle(System.Int32,System.Single[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address, and an
            array payload of single-precision floating point numbers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> write command with the specified address and payload.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.HarpException">
            <summary>
            Represents errors that are reported by Harp devices at runtime.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpException"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Bonsai.Harp.HarpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpException"/> class with
            a specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.Harp.HarpException.#ctor(Bonsai.Harp.HarpMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpException"/> with the specified Harp
            error message contents.
            </summary>
            <param name="message">The Harp message which reported the error.</param>
        </member>
        <member name="T:Bonsai.Harp.HarpMessage">
            <summary>
            Represents a single message of the Harp protocol.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpMessage"/> class from
            the full binary representation of the Harp message.
            </summary>
            <param name="messageBytes">An array of bytes containing the full binary representation of the Harp message.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageBytes"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpMessage"/> class from
            the full binary representation of the Harp message, and optionally updates
            the value of the checksum byte.
            </summary>
            <param name="updateChecksum">Indicates whether to compute and update the checksum byte.</param>
            <param name="messageBytes">An array of bytes containing the full binary representation of the Harp message.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageBytes"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.MessageType">
            <summary>
            Gets the type of the Harp message.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.Address">
            <summary>
            Gets the address of the register to which the Harp message refers to.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.Port">
            <summary>
            If the device is a hub of Harp messages, specifies the origin or destination of the Harp message.
            Otherwise, if the message refers to the device itself, returns the default value 0xFF.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.PayloadType">
            <summary>
            Gets the type of data available in the message payload.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.Error">
            <summary>
            Gets a value indicating whether this message is an error report from the device.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.Checksum">
            <summary>
            Gets the checksum byte used for error detection in the Harp protocol.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.IsTimestamped">
            <summary>
            Specifies whether the message payload contains time information.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.IsValid">
            <summary>
            Specifies whether the message bytes represent a conformant Harp message,
            including payload checksum validation.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpMessage.MessageBytes">
            <summary>
            Gets the full binary representation of the Harp message.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.IsMatch(System.Int32)">
            <summary>
            Indicates whether the Harp message matches the specified address.
            </summary>
            <param name="address">The address to test for a match.</param>
            <returns>
            <c>true</c> if this Harp message matches the specified address;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.IsMatch(System.Int32,Bonsai.Harp.MessageType)">
            <summary>
            Indicates whether the Harp message matches the specified address and message type.
            </summary>
            <param name="address">The address to test for a match.</param>
            <param name="messageType">The message type to test for a match.</param>
            <returns>
            <c>true</c> if this Harp message matches the specified address and message type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.IsMatch(System.Int32,Bonsai.Harp.PayloadType)">
            <summary>
            Indicates whether the Harp message matches the specified address and payload type.
            </summary>
            <param name="address">The address to test for a match.</param>
            <param name="payloadType">The payload type to test for a match.</param>
            <returns>
            <c>true</c> if this Harp message matches the specified address and payload type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.IsMatch(System.Int32,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType)">
            <summary>
            Indicates whether the Harp message matches the specified address, message type,
            and payload type.
            </summary>
            <param name="address">The address to test for a match.</param>
            <param name="messageType">The message type to test for a match.</param>
            <param name="payloadType">The payload type to test for a match.</param>
            <returns>
            <c>true</c> if this Harp message matches the specified address, message type,
            and payload type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestamp">
            <summary>
            Gets the timestamp of the message payload, in seconds.
            </summary>
            <returns>
            A <see cref="T:System.Double"/> representing the timestamp of the message payload, in seconds.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.TryGetTimestamp(System.Double@)">
            <summary>
            Gets the timestamp of the message payload, in seconds. A return value indicates
            whether the message has a timestamped payload.
            </summary>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <returns>
            <c>true</c> if the message has a timestamped payload; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayload">
            <summary>
            Gets the array segment containing the raw message payload. This method
            returns a view into the original array without copying any data.
            </summary>
            <returns>
            An <see cref="T:System.ArraySegment`1"/> delimiting the message payload section
            of the message bytes.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayload">
            <summary>
            Gets the array segment containing the raw message payload and the timestamp. This method
            returns a view into the original array without copying any data.
            </summary>
            <returns>
            A timestamped <see cref="T:System.ArraySegment`1"/> delimiting the message payload section
            of the message bytes.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadArray``1">
            <summary>
            Returns the message payload as an array of non-pointer value types. The size of the
            type should be a multiple of the total size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <returns>An array containing a copy of the message payload data.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadArray``1">
            <summary>
            Returns the message payload as an array of non-pointer value types and gets the message
            timestamp. The size of the type should be a multiple of the total size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <returns>A timestamped array containing a copy of the message payload data.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadByte">
            <summary>
            Returns the message payload as a single 8-bit unsigned integer.
            </summary>
            <returns>A <see cref="T:System.Byte"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadByte(System.Int32)">
            <summary>
            Returns the element at the specified index of the 8-bit unsigned integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.Byte"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadByte">
            <summary>
            Returns the message payload as a single 8-bit unsigned integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.Byte"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadByte(System.Int32)">
            <summary>
            Returns the element at the specified index of the 8-bit unsigned integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.Byte"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadSByte">
            <summary>
            Returns the message payload as a single 8-bit signed integer.
            </summary>
            <returns>An <see cref="T:System.SByte"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadSByte(System.Int32)">
            <summary>
            Returns the element at the specified index of the 8-bit signed integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            An <see cref="T:System.SByte"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadSByte">
            <summary>
            Returns the message payload as a single 8-bit signed integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.SByte"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadSByte(System.Int32)">
            <summary>
            Returns the element at the specified index of the 8-bit signed integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.SByte"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt16">
            <summary>
            Returns the message payload as a single 16-bit unsigned integer.
            </summary>
            <returns>A <see cref="T:System.UInt16"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt16(System.Int32)">
            <summary>
            Returns the element at the specified index of the 16-bit unsigned integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.UInt16"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt16">
            <summary>
            Returns the message payload as a single 16-bit unsigned integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.UInt16"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt16(System.Int32)">
            <summary>
            Returns the element at the specified index of the 16-bit unsigned integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.UInt16"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt16">
            <summary>
            Returns the message payload as a single 16-bit signed integer.
            </summary>
            <returns>A <see cref="T:System.Int16"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt16(System.Int32)">
            <summary>
            Returns the element at the specified index of the 16-bit signed integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.Int16"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt16">
            <summary>
            Returns the message payload as a single 16-bit signed integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.Int16"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt16(System.Int32)">
            <summary>
            Returns the element at the specified index of the 16-bit signed integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.Int16"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt32">
            <summary>
            Returns the message payload as a single 32-bit unsigned integer.
            </summary>
            <returns>A <see cref="T:System.UInt32"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt32(System.Int32)">
            <summary>
            Returns the element at the specified index of the 32-bit unsigned integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.UInt32"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt32">
            <summary>
            Returns the message payload as a single 32-bit unsigned integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.UInt32"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt32(System.Int32)">
            <summary>
            Returns the element at the specified index of the 32-bit unsigned integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.UInt32"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt32">
            <summary>
            Returns the message payload as a single 32-bit signed integer.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt32(System.Int32)">
            <summary>
            Returns the element at the specified index of the 32-bit signed integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            An <see cref="T:System.Int32"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt32">
            <summary>
            Returns the message payload as a single 32-bit signed integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.Int32"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt32(System.Int32)">
            <summary>
            Returns the element at the specified index of the 32-bit signed integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.Int32"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt64">
            <summary>
            Returns the message payload as a single 64-bit unsigned integer.
            </summary>
            <returns>A <see cref="T:System.UInt64"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadUInt64(System.Int32)">
            <summary>
            Returns the element at the specified index of the 64-bit unsigned integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.UInt64"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt64">
            <summary>
            Returns the message payload as a single 64-bit unsigned integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.UInt64"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadUInt64(System.Int32)">
            <summary>
            Returns the element at the specified index of the 64-bit unsigned integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.UInt64"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt64">
            <summary>
            Returns the message payload as a single 64-bit signed integer.
            </summary>
            <returns>A <see cref="T:System.Int64"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadInt64(System.Int32)">
            <summary>
            Returns the element at the specified index of the 64-bit signed integer array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.Int64"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt64">
            <summary>
            Returns the message payload as a single 64-bit signed integer and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.Int64"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadInt64(System.Int32)">
            <summary>
            Returns the element at the specified index of the 64-bit signed integer array payload
            and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.Int64"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadSingle">
            <summary>
            Returns the message payload as a single-precision floating point number.
            </summary>
            <returns>A <see cref="T:System.Single"/> representing the message payload.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetPayloadSingle(System.Int32)">
            <summary>
            Returns the element at the specified index of the single-precision floating point array payload.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A <see cref="T:System.Single"/> representing the element at the specified index of the
            array payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadSingle">
            <summary>
            Returns the message payload as a single-precision floating point number and gets the message timestamp.
            </summary>
            <returns>A timestamped <see cref="T:System.Single"/> representing the message payload.</returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.GetTimestampedPayloadSingle(System.Int32)">
            <summary>
            Returns the element at the specified index of the single-precision floating point array
            payload and gets the message timestamp.
            </summary>
            <param name="index">The zero-based index of the array element to get.</param>
            <returns>
            A timestamped <see cref="T:System.Single"/> representing the element at the specified index
            of the array payload.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.CopyTo``1(``0[])">
            <summary>
            Copies the message payload into an array of non-pointer value types. The size in bytes of the
            array should be equal to or higher than the total size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <param name="value">The array which will contain the copy of the message payload.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of bytes in <paramref name="value"/> is less than the total size of the payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.CopyTo``1(``0[],System.Double@)">
            <summary>
            Copies the message payload into an array of non-pointer value types and gets the message
            timestamp. The size in bytes of the array should be equal to or higher than the total
            size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <param name="value">The array which will contain the copy of the message payload.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of bytes in <paramref name="value"/> is less than the total size of the payload.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.CopyTo``1(``0[],System.Int32)">
            <summary>
            Copies the message payload into an array of non-pointer value types, starting at the specified index.
            The size in bytes of the array should be equal to or higher than the total size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <param name="value">The array which will contain the copy of the message payload.</param>
            <param name="index">The zero-based offset into <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of bytes in <paramref name="value"/> is less than <paramref name="index"/> times size of
            each array element plus the total size of the payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.CopyTo``1(``0[],System.Int32,System.Double@)">
            <summary>
            Copies the message payload into an array of non-pointer value types, starting at the specified index,
            and gets the message timestamp. The size in bytes of the array should be equal to or higher than the total
            size of the payload.
            </summary>
            <typeparam name="TArray">The type of the non-pointer values in the array.</typeparam>
            <param name="value">The array which will contain the copy of the message payload.</param>
            <param name="index">The zero-based offset into <paramref name="value"/>.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of bytes in <paramref name="value"/> is less than <paramref name="index"/> times size of
            each array element plus the total size of the payload.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The message does not have a timestamped payload.
            </exception>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">The raw binary representation of the payload data.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Int32,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">The raw binary representation of the payload data.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.ArraySegment{System.Byte})">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and payload
            data stored in the specified array segment.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">
            An array segment containing the raw binary representation of the payload data.
            </param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Int32,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.ArraySegment{System.Byte})">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and payload
            data stored in the specified array segment.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">
            An array segment containing the raw binary representation of the payload data.
            </param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Double,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">The raw binary representation of the payload data.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port,
            timestamp, and payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">The raw binary representation of the payload data.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Double,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.ArraySegment{System.Byte})">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type,
            timestamp, and payload data stored in the specified array segment.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">
            An array segment containing the raw binary representation of the payload data.
            </param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromPayload(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,Bonsai.Harp.PayloadType,System.ArraySegment{System.Byte})">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port,
            timestamp, and payload data stored in the specified array segment.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="payloadType">The type of data available in the message payload.</param>
            <param name="payload">
            An array segment containing the raw binary representation of the payload data.
            </param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,Bonsai.Harp.MessageType,System.Byte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 8-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Byte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 8-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Byte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 8-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Byte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 8-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,Bonsai.Harp.MessageType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 8-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 8-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 8-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromByte(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Byte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 8-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,Bonsai.Harp.MessageType,System.SByte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 8-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.SByte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 8-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Double,Bonsai.Harp.MessageType,System.SByte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 8-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.SByte)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 8-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,Bonsai.Harp.MessageType,System.SByte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 8-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.SByte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 8-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Double,Bonsai.Harp.MessageType,System.SByte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 8-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSByte(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.SByte[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 8-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,Bonsai.Harp.MessageType,System.UInt16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 16-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 16-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 16-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 16-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,Bonsai.Harp.MessageType,System.UInt16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 16-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 16-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 16-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt16(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 16-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,Bonsai.Harp.MessageType,System.Int16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 16-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 16-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 16-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int16)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 16-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,Bonsai.Harp.MessageType,System.Int16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 16-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 16-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 16-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt16(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int16[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 16-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,Bonsai.Harp.MessageType,System.UInt32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 32-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 32-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 32-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 32-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,Bonsai.Harp.MessageType,System.UInt32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 32-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 32-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 32-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt32(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 32-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,Bonsai.Harp.MessageType,System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 32-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 32-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 32-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int32)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 32-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,Bonsai.Harp.MessageType,System.Int32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 32-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 32-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 32-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt32(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int32[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 32-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,Bonsai.Harp.MessageType,System.UInt64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 64-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 64-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 64-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 64-bit unsigned integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,Bonsai.Harp.MessageType,System.UInt64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 64-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.UInt64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 64-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 64-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromUInt64(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.UInt64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 64-bit unsigned integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,Bonsai.Harp.MessageType,System.Int64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and a
            single value 64-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and a
            single value 64-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and a
            single value 64-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int64)">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and a
            single value 64-bit signed integer payload.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="value">The value to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,Bonsai.Harp.MessageType,System.Int64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of 64-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Int64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of 64-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of 64-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromInt64(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Int64[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of 64-bit signed integers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSingle(System.Int32,Bonsai.Harp.MessageType,System.Single[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, and an
            array payload of single-precision floating point numbers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSingle(System.Int32,System.Int32,Bonsai.Harp.MessageType,System.Single[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, and an
            array payload of single-precision floating point numbers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSingle(System.Int32,System.Double,Bonsai.Harp.MessageType,System.Single[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, timestamp, and an
            array payload of single-precision floating point numbers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.FromSingle(System.Int32,System.Int32,System.Double,Bonsai.Harp.MessageType,System.Single[])">
            <summary>
            Returns a <see cref="T:Bonsai.Harp.HarpMessage"/> with the specified address, message type, port, timestamp, and an
            array payload of single-precision floating point numbers.
            </summary>
            <param name="address">The address of the register to which the Harp message refers to.</param>
            <param name="port">The origin or destination of the Harp message, for routing purposes.</param>
            <param name="timestamp">The timestamp of the message payload, in seconds.</param>
            <param name="messageType">The type of the Harp message.</param>
            <param name="values">The values to be stored in the payload.</param>
            <returns>
            A valid <see cref="T:Bonsai.Harp.HarpMessage"/> instance with the specified address, message type, port,
            timestamp, and payload.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the Harp message metadata, payload length and timestamp.
            </summary>
            <returns>
            A formatted <see cref="T:System.String"/> representing the Harp message metadata, payload length and timestamp.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.HarpVersion">
            <summary>
            Represents the major and minor version of Harp firmware or hardware.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.HarpVersion"/> class with the specified
            major and minor version.
            </summary>
            <param name="major">The optional major version. If not specified, matches against all versions.</param>
            <param name="minor">
            The optional minor version. If not specified, matches against all minor versions with the same major version.
            </param>
        </member>
        <member name="P:Bonsai.Harp.HarpVersion.Major">
            <summary>
            Gets the optional major version.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.HarpVersion.Minor">
            <summary>
            Gets the optional minor version.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.Satisfies(Bonsai.Harp.HarpVersion)">
            <summary>
            Returns whether the specified version matches the current version, taking into account
            compatible floating ranges.
            </summary>
            <param name="other">The <see cref="T:Bonsai.Harp.HarpVersion"/> with which to compare.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> matches against the current version;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.CompareTo(Bonsai.Harp.HarpVersion)">
            <summary>
            Performs a comparison with another version object and returns a value indicating
            whether this version is less than, equal, or greater than the other.
            </summary>
            <param name="other">The version object to compare with.</param>
            <returns>
            A negative number if this version is lower than the other version; zero if it
            is the same version; a positive number if this version is higher than the other
            version. Floating wildcards are always smaller for the purposes of ordering.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">The object to compare with the current version.</param>
            <returns>
            <b>true</b> if the specified object is equal to the current version;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.Equals(Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the specified version is equal to the current version.
            </summary>
            <param name="other">The version object to compare with the current version.</param>
            <returns>
            <b>true</b> if the specified version object is equal to the current version;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.GetHashCode">
            <summary>
            Computes the hash code for the current version object.
            </summary>
            <returns>
            The hash code for the current version object, extracted from a
            combination of the major and minor version hashes.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_Equality(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the values on both sides of the equality operator
            are equal.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is equal
            to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_Inequality(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the values on both sides of the inequality operator
            are not equal.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is not equal
            to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_LessThan(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the value on the left-hand side of the operator is less than
            the value on the right-hand side.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is less than
            the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_GreaterThan(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the value on the left-hand side of the operator is greater than
            the value on the right-hand side.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is greater than
            the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_LessThanOrEqual(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the value on the left-hand side of the operator is less than
            or equal to the value on the right-hand side.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is less than
            or equal to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.op_GreaterThanOrEqual(Bonsai.Harp.HarpVersion,Bonsai.Harp.HarpVersion)">
            <summary>
            Determines whether the value on the left-hand side of the operator is greater than
            or equal to the value on the right-hand side.
            </summary>
            <param name="lhs">The value on the left-hand side of the operator.</param>
            <param name="rhs">The value on the right-hand side of the operator.</param>
            <returns>
            <b>true</b> if the value on the left-hand side of the operator is greater than
            or equal to the value on the right-hand side; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.Parse(System.String)">
            <summary>
            Converts a string representation of a <see cref="T:Bonsai.Harp.HarpVersion"/> to its
            equivalent value.
            </summary>
            <param name="version">The string representing a <see cref="T:Bonsai.Harp.HarpVersion"/>.</param>
            <returns>The equivalent <see cref="T:Bonsai.Harp.HarpVersion"/> object for the specified string representation.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.TryParse(System.String,Bonsai.Harp.HarpVersion@)">
            <summary>
            Converts a string representation of a <see cref="T:Bonsai.Harp.HarpVersion"/> to its
            equivalent value. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="version">The string representing a <see cref="T:Bonsai.Harp.HarpVersion"/>.</param>
            <param name="value">
            When this method returns, contains the equivalent <see cref="T:Bonsai.Harp.HarpVersion"/> object
            for the specified string representation if the conversion was successful;
            otherwise, contains <b>null</b>.
            </param>
            <returns><b>true</b> if the conversion was successful; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Bonsai.Harp.HarpVersion.ToString">
            <summary>
            Converts the <see cref="T:Bonsai.Harp.HarpVersion"/> object to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the <see cref="T:Bonsai.Harp.HarpVersion"/> object.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.LedState">
            <summary>
            Specifies the state of an LED on the Harp device.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.LedState.On">
            <summary>
            Specifies that the LED is on.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.LedState.Off">
            <summary>
            Specifies that the LED is off.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.MessageType">
            <summary>
            Specifies the type of a Harp device message.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.MessageType.Read">
            <summary>
            The device should read the contents of the register at the specified address.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.MessageType.Write">
            <summary>
            The device should write the message payload to the register at the specified address.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.MessageType.Event">
            <summary>
            The device is reporting the contents of the register at the specified address.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.ObservableExtensions">
            <summary>
            Provides a set of static extension methods to aid in writing queries over observable Harp message sequences.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Event(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32)">
            <summary>
            Filters the elements of an observable sequence of Harp event messages based
            on their address.
            </summary>
            <param name="source">The observable sequence whose event messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <returns>
            An observable sequence that contains event messages from the input sequence that
            match the specified <paramref name="address"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Event(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32,System.Boolean)">
            <summary>
            Filters the elements of an observable sequence of Harp event messages based
            on their address.
            </summary>
            <param name="source">The observable sequence whose event messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <param name="allowErrors"><c>true</c> to allow error messages in the filter; otherwise, <c>false</c>.</param>
            <returns>
            An observable sequence that contains event messages from the input sequence that
            match the specified <paramref name="address"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},Bonsai.Harp.MessageType)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based on their message type.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="messageType">The message type to test for a match.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="messageType"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},Bonsai.Harp.MessageType,System.Boolean)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based on their message type.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="messageType">The message type to test for a match.</param>
            <param name="allowErrors"><c>true</c> to allow error messages in the filter; otherwise, <c>false</c>.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="messageType"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based
            on their address.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="address"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32,System.Boolean)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based
            on their address.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <param name="allowErrors"><c>true</c> to allow error messages in the filter; otherwise, <c>false</c>.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="address"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32,Bonsai.Harp.MessageType)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based
            on their address and message type.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <param name="messageType">The message type to test for a match.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="address"/> and <paramref name="messageType"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.ObservableExtensions.Where(System.IObservable{Bonsai.Harp.HarpMessage},System.Int32,Bonsai.Harp.MessageType,System.Boolean)">
            <summary>
            Filters the elements of an observable sequence of Harp messages based
            on their address and message type.
            </summary>
            <param name="source">The observable sequence whose messages to filter.</param>
            <param name="address">The address to test for a match.</param>
            <param name="messageType">The message type to test for a match.</param>
            <param name="allowErrors"><c>true</c> to allow error messages in the filter; otherwise, <c>false</c>.</param>
            <returns>
            An observable sequence that contains messages from the input sequence that
            match the specified <paramref name="address"/> and <paramref name="messageType"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.Parse">
            <summary>
            Represents an operator which extracts the payload data from an observable sequence of Harp messages.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Parse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.Parse"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Parse.Type">
            <summary>
            Gets or sets the type of payload data to parse.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Parse.IsArray">
            <summary>
            Gets or sets a value indicating whether the payload is an array.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Parse.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that specifies how to extract the payload data from a valid Harp message.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that maps the input Harp message parameter to the
            specified payload data type.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.PayloadType">
            <summary>
            Specifies the type of data available in the message payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.U8">
            <summary>
            Specifies an unsigned 8-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.S8">
            <summary>
            Specifies a signed 8-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.U16">
            <summary>
            Specifies an unsigned 16-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.S16">
            <summary>
            Specifies a signed 16-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.U32">
            <summary>
            Specifies an unsigned 32-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.S32">
            <summary>
            Specifies a signed 32-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.U64">
            <summary>
            Specifies an unsigned 64-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.S64">
            <summary>
            Specifies a signed 64-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.Float">
            <summary>
            Specifies a single-precision 32-bits floating-point payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.Timestamp">
            <summary>
            Specifies the payload contains time information.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedU8">
            <summary>
            Specifies a timestamped unsigned 8-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedS8">
            <summary>
            Specifies a timestamped signed 8-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedU16">
            <summary>
            Specifies a timestamped unsigned 16-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedS16">
            <summary>
            Specifies a timestamped signed 16-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedU32">
            <summary>
            Specifies a timestamped unsigned 32-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedS32">
            <summary>
            Specifies a timestamped signed 32-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedU64">
            <summary>
            Specifies a timestamped unsigned 64-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedS64">
            <summary>
            Specifies a timestamped signed 64-bits payload.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.PayloadType.TimestampedFloat">
            <summary>
            Specifies a timestamped single-precision 32-bits floating-point payload.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.PortNameConverter">
            <summary>
            Provides a type converter to convert port name strings to and from
            other representations.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.PortNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Harp.PortNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Harp.ResetMode">
            <summary>
            Specifies the behavior of the non-volatile registers when resetting the device.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.ResetMode.RestoreDefault">
            <summary>
            The device will boot with all the registers reset to their default factory values.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.ResetMode.RestoreEeprom">
            <summary>
            The device will boot and restore all the registers to the values stored in non-volatile memory.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.ResetMode.Save">
            <summary>
            The device will boot and save all the current register values to non-volatile memory.
            </summary>
        </member>
        <member name="F:Bonsai.Harp.ResetMode.RestoreName">
            <summary>
            The device will boot with the default device name.
            </summary>
        </member>
        <member name="T:Bonsai.Harp.Timestamped`1">
            <summary>
            Represents a timestamped payload value.
            </summary>
            <typeparam name="T">The type of the value in the timestamped payload.</typeparam>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.#ctor(`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Harp.Timestamped`1"/> class with the specified
            payload value and timestamp.
            </summary>
            <param name="value">The value of the timestamped payload.</param>
            <param name="seconds">The timestamp of the payload, in fractional seconds.</param>
        </member>
        <member name="P:Bonsai.Harp.Timestamped`1.Seconds">
            <summary>
            Gets the timestamp of the payload, in fractional seconds.
            </summary>
        </member>
        <member name="P:Bonsai.Harp.Timestamped`1.Value">
            <summary>
            Gets the value of the timestamped payload.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.Deconstruct(`0@,System.Double@)">
            <summary>
            Deconstructs the components of a timestamped payload into separate variables.
            </summary>
            <param name="value">The value of the timestamped payload.</param>
            <param name="seconds">The timestamp of the payload, in fractional seconds.</param>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.Equals(Bonsai.Harp.Timestamped{`0})">
            <summary>
            Returns a value indicating whether this instance has the same value and timestamp
            as a specified <see cref="T:Bonsai.Harp.Timestamped`1"/> structure.
            </summary>
            <param name="other">The <see cref="T:Bonsai.Harp.Timestamped`1"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same value and timestamp as this
            instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is an <see cref="T:Bonsai.Harp.Timestamped`1"/> structure
            with the same value and timestamp as this <see cref="T:Bonsai.Harp.Timestamped`1"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an <see cref="T:Bonsai.Harp.Timestamped`1"/> and has the
            same value and timestamp as this <see cref="T:Bonsai.Harp.Timestamped`1"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Bonsai.Harp.Timestamped`1"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:Bonsai.Harp.Timestamped`1"/> structure.</returns>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:Bonsai.Harp.Timestamped`1"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="P:Bonsai.Harp.Timestamped`1.Value"/> and <see cref="P:Bonsai.Harp.Timestamped`1.Seconds"/>
            properties of this <see cref="T:Bonsai.Harp.Timestamped`1"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.op_Equality(Bonsai.Harp.Timestamped{`0},Bonsai.Harp.Timestamped{`0})">
            <summary>
            Tests whether two <see cref="T:Bonsai.Harp.Timestamped`1"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:Bonsai.Harp.Timestamped`1"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:Bonsai.Harp.Timestamped`1"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal value and timestamp;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Harp.Timestamped`1.op_Inequality(Bonsai.Harp.Timestamped{`0},Bonsai.Harp.Timestamped{`0})">
            <summary>
            Tests whether two <see cref="T:Bonsai.Harp.Timestamped`1"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:Bonsai.Harp.Timestamped`1"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Bonsai.Harp.Timestamped`1"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in value or timestamp;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Bonsai.Harp.Timestamped">
            <summary>
            Provides static methods for creating timestamped payload objects.
            </summary>
        </member>
        <member name="M:Bonsai.Harp.Timestamped.Create``1(``0,System.Double)">
            <summary>
            Creates a new timestamped payload value.
            </summary>
            <typeparam name="T">The type of the value in the timestamped payload.</typeparam>
            <param name="value">The value of the timestamped payload.</param>
            <param name="seconds">The timestamp of the payload, in fractional seconds.</param>
            <returns>
            A new instance of the <see cref="T:Bonsai.Harp.Timestamped`1"/> class with the specified
            payload value and timestamp.
            </returns>
        </member>
    </members>
</doc>
