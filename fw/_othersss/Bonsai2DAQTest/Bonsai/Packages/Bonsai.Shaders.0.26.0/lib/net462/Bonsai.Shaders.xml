<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.Shaders</name>
    </assembly>
    <members>
        <member name="T:Bonsai.Shaders.AspectRatio">
            <summary>
            Represents an operator that calculates the ratio of window viewport
            width to its height for each viewport size in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.AspectRatio.Process(System.IObservable{System.Drawing.Size})">
            <summary>
            Calculates the ratio of window viewport width to its height for each
            size in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Drawing.Size"/> values representing the viewport width
            and height.
            </param>
            <returns>
            A sequence of floating-point values representing the aspect ratio for
            each size in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.AspectRatio.Process(System.IObservable{OpenTK.INativeWindow})">
            <summary>
            Calculates the ratio of window viewport width to its height for each
            window in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenTK.INativeWindow"/> objects.
            </param>
            <returns>
            A sequence of floating-point values representing the aspect ratio for
            each active viewport in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.AspectRatio.Process``1(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,``0}})">
            <summary>
            Calculates the ratio of window viewport width to its height for each
            window event in an observable sequence.
            </summary>
            <typeparam name="TEventArgs">
            The type of the event data generated by the window event.
            </typeparam>
            <param name="source">
            A sequence of event data generated from a shader window.
            </param>
            <returns>
            A sequence of floating-point values representing the aspect ratio for
            the current viewport in each window in the sequence of event data.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.AspectRatio.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Calculates the ratio of window viewport width to its height for each
            size pair in an observable sequence.
            </summary>
            <param name="source">
            A sequence of floating-point value pairs representing the viewport width
            and height.
            </param>
            <returns>
            A sequence of floating-point values representing the aspect ratio for
            each size pair in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.AspectRatio.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the ratio of the shader window viewport width to its height,
            at the time the <paramref name="source"/> sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to calculate
            the current aspect ratio of the shader window.
            </param>
            <returns>
            A sequence of floating-point values representing the current aspect
            ratio of the shader window, at the time when the <paramref name="source"/>
            sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.BindTexture">
            <summary>
            Represents an operator that binds a buffer to the specified texture unit
            for each texture or notification in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.TextureSlot">
            <summary>
            Gets or sets a value specifying the slot on which to bind the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.ShaderName">
            <summary>
            Gets or sets the name of the shader program.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.TextureName">
            <summary>
            Gets or sets the name of the texture to be bound to the shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.TextureTarget">
            <summary>
            Gets or sets a value specifying the texture target to be bound
            to the sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.Index">
            <summary>
            Gets or sets the index of the texture to be bound to the shader.
            Only applicable to texture array objects.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.BindTexture.IndexSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Shaders.BindTexture.Index"/> property
            should be serialized.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.BindTexture.Process``1(System.IObservable{``0})">
            <summary>
            Binds the specified texture buffer to the specified texture unit for
            each notification in an observable sequence.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to bind
            the texture buffer to the specified texture unit.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of binding the texture buffer to the
            specified texture unit.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.BindTexture.Process(System.IObservable{Bonsai.Shaders.Texture})">
            <summary>
            Binds each texture buffer in an observable sequence to the specified
            texture unit for each notification in an observable sequence.
            </summary>
            <remarks>
            If the <see cref="P:Bonsai.Shaders.BindTexture.TextureName"/> property is specified, the corresponding
            texture buffer will be used instead of the values in the
            <paramref name="source"/> sequence.
            </remarks>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects to be bound to the specified
            texture unit.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of binding the texture buffer objects
            in the sequence to the specified texture unit.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Bounds">
            <summary>
            Represents an axis-aligned bounding box for mesh vertices.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.Bounds.Empty">
            <summary>
            Represents a <see cref="T:Bonsai.Shaders.Bounds"/> instance with empty extents.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Bounds.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Bounds"/> class using
            the specified bounding-box center and dimensions.
            </summary>
            <param name="center">The center of the axis-aligned bounding box.</param>
            <param name="extents">
            The dimensions of the axis-aligned bounding box, measured from
            the center to the extremities.
            </param>
        </member>
        <member name="P:Bonsai.Shaders.Bounds.Center">
            <summary>
            Gets the center of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Bounds.Extents">
            <summary>
            Gets the dimensions of the axis-aligned bounding box, measured from
            the center to the extremities.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Bounds.Minimum">
            <summary>
            Gets the minimum point of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Bounds.Maximum">
            <summary>
            Gets the maximum point of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Bounds.Size">
            <summary>
            Gets the full size of the axis-aligned bounding box across all
            three dimensions.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Bounds.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Camera">
            <summary>
            Represents a point of view from which to render a 3D scene.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.Camera.ViewMatrix">
            <summary>
            The view matrix representing a transformation from world coordinates
            into eye space coordinates.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.Camera.ProjectionMatrix">
            <summary>
            The projection matrix representing a transformation from eye space
            coordinates into clip space coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Camera.#ctor(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Camera"/> class using
            the specified view matrix and projection matrix.
            </summary>
            <param name="view">
            The view matrix representing how to transform world coordinates
            into eye space coordinates depending on the position and orientation
            of the camera.
            </param>
            <param name="projection">
            The projection matrix representing how to transform eye space
            coordinates into clip space coordinates.
            </param>
        </member>
        <member name="T:Bonsai.Shaders.ComputeProgram">
            <summary>
            Provides functionality for executing and updating the state of a compute
            shader program.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ComputeProgram.WorkGroups">
            <summary>
            Gets or sets a value specifying the number of workgroups to be
            launched when dispatching the compute shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ComputeProgram.CreateShader">
            <summary>
            Compiles the compute shader and returns the program object handle.
            </summary>
            <returns>
            A handle to the compute shader program object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ComputeProgram.OnDispatch">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.BlendFunctionState">
            <summary>
            Represents a configuration object specifying the operation of blending
            for all draw buffers.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.BlendFunctionState.SourceFactor">
            <summary>
            Gets or sets a value specifying the scale factor for blending source
            color values.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.BlendFunctionState.DestinationFactor">
            <summary>
            Gets or sets a value specifying the scale factor for blending destination
            color values.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.BlendFunctionState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.BlendFunctionState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.BufferBindingConfiguration">
            <summary>
            Provides an abstract base class for binding uniform variables to buffer objects.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.BufferBindingConfiguration.Name">
            <summary>
            Gets or sets the name of the uniform variable that will be bound to
            the buffer object.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.BufferBindingConfigurationCollection">
            <summary>
            Represents a collection of buffer binding configuration objects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.BufferBindingConfigurationCollection.GetKeyForItem(Bonsai.Shaders.Configuration.BufferBindingConfiguration)">
            <summary>
            Returns the key for the specified configuration object.
            </summary>
            <param name="item">The configuration object from which to extract the key.</param>
            <returns>The key for the specified configuration object.</returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ClearColorState">
            <summary>
            Represents a configuration object specifying the color used to clear
            the framebuffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ClearColorState.ClearColor">
            <summary>
            Gets or sets a value specifying the color used to clear the framebuffer
            before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ClearColorState.ClearColorHtml">
            <summary>
            Gets or sets an HTML representation of the clear color value for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ClearColorState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ClearColorState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ColorFormatConfiguration">
            <summary>
            Represents a configuration object specifying the color format of a draw buffer.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ColorFormatConfiguration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Configuration.ColorFormatConfiguration"/>
            structure using the specified total number of bits per pixel.
            </summary>
            <param name="bpp">
            The total number of bits per pixel used by the color format.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ColorFormatConfiguration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Configuration.ColorFormatConfiguration"/>
            structure using the specified number of bits per pixel for each channel.
            </summary>
            <param name="red">The number of bits per pixel for the red channel.</param>
            <param name="green">The number of bits per pixel for the green channel.</param>
            <param name="blue">The number of bits per pixel for the blue channel.</param>
            <param name="alpha">The number of bits per pixel for the alpha channel.</param>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ColorFormatConfiguration.Red">
            <summary>
            Gets or sets a value specifying the number of bits per pixel for the
            red channel.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ColorFormatConfiguration.Green">
            <summary>
            Gets or sets a value specifying the number of bits per pixel for the
            green channel.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ColorFormatConfiguration.Blue">
            <summary>
            Gets or sets a value specifying the number of bits per pixel for the
            blue channel.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ColorFormatConfiguration.Alpha">
            <summary>
            Gets or sets a value specifying the number of bits per pixel for the
            alpha channel.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ColorFormatConfiguration.BitsPerPixel">
            <summary>
            Gets or sets a value specifying the total number of bits per pixel.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ColorFormatConfiguration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current color format
            configuration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current color format
            configuration.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ComputeProgramConfiguration">
            <summary>
            Provides configuration and loading functionality for compute shader programs.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ComputeProgramConfiguration.ComputeShader">
            <summary>
            Gets or sets the path to the compute shader file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ComputeProgramConfiguration.WorkGroups">
            <summary>
            Gets or sets a value specifying the number of workgroups to be
            launched when dispatching the compute shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ComputeProgramConfiguration.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new compute shader program resource.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Shader"/> class representing the
            compiled compute shader.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ComputeProgramConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.Cubemap">
            <summary>
            Provides configuration and loading functionality for cubemap texture resources.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Cubemap.FaceSize">
            <summary>
            Gets or sets the texture size for each of the cubemap faces.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Cubemap.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the cubemap.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Cubemap.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Cubemap.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.Cubemap.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new cubemap texture resource.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the cubemap texture.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.DepthFunctionState">
            <summary>
            Represents a configuration object specifying the function used for depth
            buffer comparisons.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.DepthFunctionState.Function">
            <summary>
            Gets or sets a value specifying the function used for depth buffer
            comparisons.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DepthFunctionState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DepthFunctionState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.DepthMaskState">
            <summary>
            Represents a configuration object specifying whether the depth buffer
            is enabled for writing.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.DepthMaskState.Enabled">
            <summary>
            Gets or sets a value specifying whether the depth buffer is enabled
            for writing.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DepthMaskState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DepthMaskState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.DisableState">
            <summary>
            Represents a configuration object for disabling the specified render
            state capability.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.DisableState.Capability">
            <summary>
            Gets or sets a value specifying the render state capability to disable.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DisableState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.DisableState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.EnableState">
            <summary>
            Represents a configuration object for enabling the specified render
            state capability.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.EnableState.Capability">
            <summary>
            Gets or sets a value specifying the render state capability to enable.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.EnableState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.EnableState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.FloatUniform">
            <summary>
            Represents a configuration object for initializing the value of a shader
            uniform variable with one floating-point component.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FloatUniform.Value">
            <summary>
            Gets or sets the value used to initialize the shader uniform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.FloatUniform.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration">
            <summary>
            Represents a configuration object specifying the texture to attach in a
            framebuffer attachment slot for render to texture shader passes.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.TextureName">
            <summary>
            Gets or sets the name of the texture to attach to the framebuffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.Width">
            <summary>
            Gets or sets the width of the framebuffer texture attachment. If no value
            is specified, the width of the render window will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.Height">
            <summary>
            Gets or sets the height of the framebuffer texture attachment. If no value
            is specified, the height of the render window will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.Attachment">
            <summary>
            Gets or sets a value specifying the framebuffer attachment slot.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the
            framebuffer texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.Format">
            <summary>
            Gets or sets a value specifying the pixel format of the framebuffer
            texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.Type">
            <summary>
            Gets or sets a value specifying the pixel type of the framebuffer
            texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.ClearColorHtml">
            <summary>
            Gets or sets an HTML representation of the clear color value for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.FramebufferConfiguration">
            <summary>
            Represents a configuration object specifying the framebuffer object used
            for render to texture shader passes.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.FramebufferConfiguration.FramebufferAttachments">
            <summary>
            Gets the collection of configuration objects specifying the framebuffer
            attachment slots used to render the framebuffer.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.GraphicsModeConfiguration">
            <summary>
            Represents a configuration object for defining the format for all graphics
            operations in the graphics context.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.ColorFormat">
            <summary>
            Gets or sets a value specifying the color format of the color buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.Depth">
            <summary>
            Gets or sets the number of bits in the depth buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.Stencil">
            <summary>
            Gets or sets the number of bits in the stencil buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.Samples">
            <summary>
            Gets or sets the number of samples to use for full screen anti-aliasing.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.AccumulatorFormat">
            <summary>
            Gets or sets a value specifying the color format of the accumulator buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.Buffers">
            <summary>
            Gets or sets the number of render buffers. Typical values include
            one (single-), two (double-) or three (triple-buffering).
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.Stereo">
            <summary>
            Gets or sets a value specifying whether to create a graphics mode with
            stereo capabilities.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.CreateGraphicsMode">
            <summary>
            Creates a new instance of the <see cref="T:OpenTK.Graphics.GraphicsMode"/> class specifying
            the format for graphics operations.
            </summary>
            <returns>
            A new instance of the <see cref="T:OpenTK.Graphics.GraphicsMode"/> class using the specified
            format properties of this configuration object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.GraphicsModeConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.HintState">
            <summary>
            Represents a configuration object for specifying implementation-specific
            render hints.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.HintState.Target">
            <summary>
            Gets or sets a value specifying the implementation specific behavior
            to be controlled.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.HintState.Mode">
            <summary>
            Gets or sets a value specifying the desired behavior.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.HintState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.HintState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ImageCubemap">
            <summary>
            Provides configuration and loading functionality for initializing cubemap
            texture resources from the specified image files.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.PositiveX">
            <summary>
            Gets or sets the name of the image file to load for the positive
            X direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.NegativeX">
            <summary>
            Gets or sets the name of the image file to load for the negative
            X direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.PositiveY">
            <summary>
            Gets or sets the name of the image file to load for the positive
            Y direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.NegativeY">
            <summary>
            Gets or sets the name of the image file to load for the negative
            Y direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.PositiveZ">
            <summary>
            Gets or sets the name of the image file to load for the positive
            Z direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.NegativeZ">
            <summary>
            Gets or sets the name of the image file to load for the negative
            Z direction.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.ColorType">
            <summary>
            Gets or sets a value specifying optional conversions applied to the
            loaded image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageCubemap.FlipMode">
            <summary>
            Gets or sets a value specifying the optional flip mode applied to the
            loaded image.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageCubemap.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new cubemap texture resource from the specified image files.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the cubemap texture.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ImageSequence">
            <summary>
            Provides configuration and loading functionality for initializing texture
            sequences from a movie file or image sequence search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageSequence.FileName">
            <summary>
            Gets or sets the path to a movie file or image sequence search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageSequence.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to individual frames.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageSequence.FrameCount">
            <summary>
            Gets or sets the maximum number of frames to include in the image sequence.
            </summary>
            <remarks>
            If no value is specified, all frames in the video will be loaded in the
            image sequence.
            </remarks>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageSequence.StartPosition">
            <summary>
            Gets or sets the offset, in frames, at which the image sequence should start.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageSequence.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class containing
            all loaded texture resources in the image sequence.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the image texture sequence.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ImageTexture">
            <summary>
            Provides configuration and loading functionality for initializing a
            two-dimensional texture resource from the specified image file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageTexture.FileName">
            <summary>
            Gets or sets the name of the image file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageTexture.ColorType">
            <summary>
            Gets or sets a value specifying the color type of the loaded image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageTexture.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to the loaded image.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageTexture.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new two-dimensional texture resource from the specified
            image file.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the 2D texture.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageTexture.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration">
            <summary>
            Represents a configuration object for binding a texture to a shader
            image uniform.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration.Access">
            <summary>
            Gets or sets a value specifying the type of access that will be
            performed on the image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration.Format">
            <summary>
            Gets or sets a value specifying the format of the image elements
            when the shader reads or writes image data.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.LineWidthState">
            <summary>
            Represents a configuration object for specifying the width of rasterized
            lines.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.LineWidthState.Width">
            <summary>
            Gets or sets a value specifying the width of rasterized lines.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.LineWidthState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.LineWidthState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.MaterialConfiguration">
            <summary>
            Provides configuration and loading functionality for material shader programs.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MaterialConfiguration.VertexShader">
            <summary>
            Gets or sets the path to the vertex shader file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MaterialConfiguration.GeometryShader">
            <summary>
            Gets or sets the path to the geometry shader file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MaterialConfiguration.FragmentShader">
            <summary>
            Gets or sets the path to the fragment shader file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MaterialConfiguration.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry to draw.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MaterialConfiguration.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new material shader resource.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Shader"/> class representing the
            compiled material shader.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MaterialConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.MemoryBarrierState">
            <summary>
            Represents a configuration object for specifying barriers to order
            memory operations.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MemoryBarrierState.Barriers">
            <summary>
            Gets or sets a value specifying which memory barriers to insert.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MemoryBarrierState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MemoryBarrierState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.MeshBindingConfiguration">
            <summary>
            Represents a configuration object for binding a mesh vertex buffer object
            to a shader uniform.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MeshBindingConfiguration.Index">
            <summary>
            Gets or sets the index of the binding point on which to bind the
            mesh vertex buffer object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.MeshBindingConfiguration.MeshName">
            <summary>
            Gets or sets the name of the mesh whose vertex buffer object will be
            bound to the shader uniform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MeshBindingConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.MeshConfiguration">
            <summary>
            Provides configuration and loading functionality for mesh resources.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MeshConfiguration.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new empty mesh resource, typically used for uploading dynamic
            geometry data.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Mesh"/> class.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.MeshConfigurationCollection">
            <summary>
            Represents a collection of mesh configuration objects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.MeshConfigurationCollection.GetKeyForItem(Bonsai.Shaders.Configuration.MeshConfiguration)">
            <summary>
            Returns the key for the specified configuration object.
            </summary>
            <param name="item">The configuration object from which to extract the key.</param>
            <returns>The key for the specified configuration object.</returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.PointSizeState">
            <summary>
            Represents a configuration object for specifying the diameter of
            rasterized points.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.PointSizeState.Size">
            <summary>
            Gets or sets a value specifying the diameter of rasterized points.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.PointSizeState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.PointSizeState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.PolygonModeState">
            <summary>
            Represents a configuration object for specifying the polygon
            rasterization mode.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.PolygonModeState.Face">
            <summary>
            Gets or sets a value specifying the polygons that the rasterization
            mode applies to.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.PolygonModeState.Mode">
            <summary>
            Gets or sets a value specifying how polygons will be rasterized.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.PolygonModeState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.PolygonModeState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ScissorState">
            <summary>
            Represents a configuration object for specifying the active scissor box.
            Any fragments falling outside the scissor box will be discarded.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ScissorState.X">
            <summary>
            Gets or sets the x-coordinate of the lower left corner of the scissor
            box, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ScissorState.Y">
            <summary>
            Gets or sets the y-coordinate of the lower left corner of the scissor
            box, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ScissorState.Width">
            <summary>
            Gets or sets the width of the scissor box, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ScissorState.Height">
            <summary>
            Gets or sets the height of the scissor box, in normalized coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ScissorState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ScissorState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ShaderConfiguration">
            <summary>
            Provides the abstract base class for configuring and loading shader resources.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderConfiguration.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the render states
            which are required to run the shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderConfiguration.ShaderUniforms">
            <summary>
            Gets the collection of configuration objects specifying the default values
            of uniform variables in the shader program.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderConfiguration.BufferBindings">
            <summary>
            Gets the collection of configuration objects specifying the buffer bindings
            to set before running the shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderConfiguration.FramebufferAttachments">
            <summary>
            Gets the collection of configuration objects specifying any framebuffer
            attachments to use when running the shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderConfiguration.Framebuffer">
            <summary>
            Gets the configuration state of the framebuffer object used for render
            to texture passes.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ShaderConfigurationCollection">
            <summary>
            Represents a collection of shader configuration objects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ShaderConfigurationCollection.GetKeyForItem(Bonsai.Shaders.Configuration.ShaderConfiguration)">
            <summary>
            Returns the key for the specified configuration object.
            </summary>
            <param name="item">The configuration object from which to extract the key.</param>
            <returns>The key for the specified configuration object.</returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ShaderWindowSettings">
            <summary>
            Represents the configuration settings used to initialize a shader window.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ShaderWindowSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Configuration.ShaderWindowSettings"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Width">
            <summary>
            Gets or sets the width of the shader window, in pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Height">
            <summary>
            Gets or sets the height of the shader window, in pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Title">
            <summary>
            Gets or sets the title of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.VSync">
            <summary>
            Gets or sets a value specifying the V-Sync configuration for shader
            window buffer swaps.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.SwapSync">
            <summary>
            Gets or sets a value specifying whether to synchronize buffer swaps
            across application windows.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.ClearColorHtml">
            <summary>
            Gets or sets an HTML representation of the clear color value for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.CursorVisible">
            <summary>
            Gets or sets a value specifying whether to hide or show the mouse cursor
            over the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Location">
            <summary>
            Gets or sets a value specifying the starting location of the shader window.
            If no value is specified, the window will be located at the center of the screen.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.WindowBorder">
            <summary>
            Gets or sets a value specifying the shader window border.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.WindowState">
            <summary>
            Gets or sets a value specifying the starting state of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.DisplayDevice">
            <summary>
            Gets or sets a value specifying the display device index on which to
            create the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.TargetRenderFrequency">
            <summary>
            Gets or sets a value specifying the target render frequency. A value of zero
            indicates the maximum possible frequency will be used to generate render events.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.TargetUpdateFrequency">
            <summary>
            Gets or sets a value specifying the target update frequency. If no value is
            specified, the value of the target render frequency will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the initial render
            state of the shader window graphics context.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.GraphicsMode">
            <summary>
            Gets or sets a value specifying the graphics mode of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Shaders">
            <summary>
            Gets the collection of shader resources to be loaded when creating
            the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Textures">
            <summary>
            Gets the collection of texture resources to be loaded when creating
            the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ShaderWindowSettings.Meshes">
            <summary>
            Gets the collection of mesh resources to be loaded when creating the
            shader window.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.StateConfiguration">
            <summary>
            Provides an abstract base class for configuring the state of the current
            graphics context.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.StateConfiguration.Execute(Bonsai.Shaders.ShaderWindow)">
            <summary>
            Updates the state of the current graphics context.
            </summary>
            <param name="window">
            The shader window associated with the current graphics context.
            </param>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.StateConfigurationCollection">
            <summary>
            Represents a collection of render state configuration objects.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.Texture2D">
            <summary>
            Provides configuration and loading functionality for two-dimensional
            texture resources.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.Width">
            <summary>
            Gets or sets the width of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.Height">
            <summary>
            Gets or sets the height of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Texture2D.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.Texture2D.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new empty two-dimensional texture resource, typically used
            for uploading dynamic texture data.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the 2D texture.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.TextureBindingConfiguration">
            <summary>
            Represents a configuration object for binding a texture to a shader
            sampler uniform.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.TextureBindingConfiguration.TextureSlot">
            <summary>
            Gets or sets a value specifying the slot on which to bind the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.TextureBindingConfiguration.TextureName">
            <summary>
            Gets or sets the name of the texture that will be bound to the sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.TextureBindingConfiguration.TextureTarget">
            <summary>
            Gets or sets a value specifying the texture target that will be bound
            to the sampler.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.TextureBindingConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.TextureConfiguration">
            <summary>
            Provides the abstract base class for configuring and loading texture resources.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.TextureConfigurationCollection">
            <summary>
            Represents a collection of texture configuration objects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.TextureConfigurationCollection.GetKeyForItem(Bonsai.Shaders.Configuration.TextureConfiguration)">
            <summary>
            Returns the key for the specified configuration object.
            </summary>
            <param name="item">The configuration object from which to extract the key.</param>
            <returns>The key for the specified configuration object.</returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.TexturedModel">
            <summary>
            Provides configuration and loading functionality for textured mesh resources
            specified as OBJ files.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.TexturedModel.FileName">
            <summary>
            Gets or sets the name of the model OBJ file.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.TexturedModel.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new mesh resource using the geometry specified in the OBJ file.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Mesh"/> class storing the geometry
            specified in the OBJ file.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.TexturedModel.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.TexturedQuad">
            <summary>
            Provides configuration and loading functionality for mesh resources using
            a simple textured quad geometry.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.TexturedQuad.QuadEffects">
            <summary>
            Gets or sets a value specifying quad geometry transformation effects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.TexturedQuad.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new mesh resource using a textured quad geometry.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Mesh"/> class storing textured quad
            geometry.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.UniformConfiguration">
            <summary>
            Provides an abstract base class for initializing the value of a shader
            uniform variable.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.UniformConfiguration.Name">
            <summary>
            Gets or sets the name of the shader uniform to initialize.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.UniformConfigurationCollection">
            <summary>
            Represents a collection of configuration objects used to initialize the
            values of uniform variables in a shader program.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.UniformConfigurationCollection.GetKeyForItem(Bonsai.Shaders.Configuration.UniformConfiguration)">
            <summary>
            Returns the key for the specified configuration object.
            </summary>
            <param name="item">The configuration object from which to extract the key.</param>
            <returns>The key for the specified configuration object.</returns>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.Vec2Uniform">
            <summary>
            Represents a configuration object for initializing the value of a shader
            uniform variable with two floating-point components.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Vec2Uniform.Value">
            <summary>
            Gets or sets the value used to initialize the shader uniform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.Vec2Uniform.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.Vec3Uniform">
            <summary>
            Represents a configuration object for initializing the value of a shader
            uniform variable with three floating-point components.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Vec3Uniform.Value">
            <summary>
            Gets or sets the value used to initialize the shader uniform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.Vec3Uniform.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.Vec4Uniform">
            <summary>
            Represents a configuration object for initializing the value of a shader
            uniform variable with four floating-point components.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.Vec4Uniform.Value">
            <summary>
            Gets or sets the value used to initialize the shader uniform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.Vec4Uniform.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.VideoTexture">
            <summary>
            Provides configuration and loading functionality for initializing streaming
            texture sequences from a movie file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.VideoTexture.BufferLength">
            <summary>
            Gets or sets the size of the pre-loading buffer for video frames.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.VideoTexture.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class providing
            support for streaming texture data from a movie file.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class representing
            the video texture.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.VideoTexture.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ViewportEffectConfiguration">
            <summary>
            Provides configuration and loading functionality for viewport effect
            shader programs.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportEffectConfiguration.FragmentShader">
            <summary>
            Gets or sets the path to the fragment shader file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportEffectConfiguration.QuadEffects">
            <summary>
            Gets or sets a value specifying quad geometry transformation effects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ViewportEffectConfiguration.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates a new viewport effect shader resource.
            </summary>
            <returns>
            A new instance of the <see cref="T:Bonsai.Shaders.Shader"/> class representing the
            compiled viewport effect shader.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ViewportEffectConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Configuration.ViewportState">
            <summary>
            Represents a configuration object for specifying the active viewport for
            rendering, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportState.X">
            <summary>
            Gets or sets the x-coordinate of the lower left corner of the viewport,
            in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportState.Y">
            <summary>
            Gets or sets the y-coordinate of the lower left corner of the viewport,
            in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportState.Width">
            <summary>
            Gets or sets the width of the viewport rectangle, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Configuration.ViewportState.Height">
            <summary>
            Gets or sets the height of the viewport rectangle, in normalized coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ViewportState.Execute(Bonsai.Shaders.ShaderWindow)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.Configuration.ViewportState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.CreateAxisAngleRotation">
            <summary>
            Represents an operator that creates a rotation matrix from an axis-angle
            representation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateAxisAngleRotation.Axis">
            <summary>
            Gets or sets a 3D vector specifying the direction of the axis of rotation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateAxisAngleRotation.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation about
            the axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateAxisAngleRotation.Generate">
            <summary>
            Generates an observable sequence that contains a single rotation matrix
            created from the specified axis-angle rotation.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> rotation matrix.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateAxisAngleRotation.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of matrices representing the specified
            axis-angle rotation, and where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateCubemapCamera">
            <summary>
            Represents an operator that generates a sequence of perspective camera
            objects which can be used to render a dynamic cubemap texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateCubemapCamera.Eye">
            <summary>
            Gets or sets the eye, or camera position, in the world coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateCubemapCamera.NearClip">
            <summary>
            Gets or sets the distance to the near clip plane.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateCubemapCamera.FarClip">
            <summary>
            Gets or sets the distance to the far clip plane.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateCubemapCamera.Generate">
            <summary>
            Generates an observable sequence of perspective camera objects which
            can be used to render a dynamic cubemap texture.
            </summary>
            <returns>
            A sequence of six <see cref="T:Bonsai.Shaders.Camera"/> objects corresponding to each
            direction of the cubemap, respectively right (+X), left (-X), top (+Y),
            bottom (-Y), back (+Z), and front (-Z).
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateCubemapCamera.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of perspective camera objects which
            can be used to render a dynamic cubemap texture, where the set of
            of <see cref="T:Bonsai.Shaders.Camera"/> objects for each cubemap is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting each new
            group of six cubemap views.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Shaders.Camera"/> objects corresponding to each
            direction of the cubemap, respectively right (+X), left (-X), top (+Y),
            bottom (-Y), back (+Z), and front (-Z), for each notification in
            the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateLookAt">
            <summary>
            Represents an operator that creates a view matrix specifying a camera
            looking at a target position.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateLookAt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.CreateLookAt"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateLookAt.Eye">
            <summary>
            Gets or sets the eye, or camera position, in the world coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateLookAt.Target">
            <summary>
            Gets or sets the target position in the world coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateLookAt.Up">
            <summary>
            Gets or sets a 3D vector specifying the up vector of the camera, in the
            world coordinate frame. Should not be parallel to the camera direction.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateLookAt.Generate">
            <summary>
            Generates an observable sequence that contains a single view matrix
            representing a camera with the specified position and up vector,
            looking at the specified target.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> look-at view
            matrix for transforming world space into camera space.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateLookAt.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of view matrices representing a camera
            with the specified position and up vector, looking at the specified
            target, where each <see cref="T:OpenTK.Matrix4"/> object is emitted only when an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> look-at view matrices
            for transforming world space into camera space.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix2">
            <summary>
            Represents an operator that creates a 2x2 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2.Row1">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2.Generate">
            <summary>
            Generates an observable sequence that contains a single 2x2 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix2"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2x2 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix2"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix2"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix2x3">
            <summary>
            Represents an operator that creates a 2x3 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2x3.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2x3.Row1">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2x3.Generate">
            <summary>
            Generates an observable sequence that contains a single 2x3 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix2x3"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2x3.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2x3 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix2x3"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix2x3"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix2x4">
            <summary>
            Represents an operator that creates a 2x4 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2x4.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix2x4.Row1">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2x4.Generate">
            <summary>
            Generates an observable sequence that contains a single 2x4 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix2x4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix2x4.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2x4 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix2x4"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix2x4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix3">
            <summary>
            Represents an operator that creates a 3x3 matrix containing 3D rotation
            and scale.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3.Row2">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3.Generate">
            <summary>
            Generates an observable sequence that contains a single 3x3 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix3"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 3x3 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix3"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix3"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix3x2">
            <summary>
            Represents an operator that creates a 3x2 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x2.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x2.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x2.Row2">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3x2.Generate">
            <summary>
            Generates an observable sequence that contains a single 3x2 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix3x2"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3x2.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 3x2 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix3x2"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix3x2"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix3x4">
            <summary>
            Represents an operator that creates a 3x4 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x4.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x4.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix3x4.Row2">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3x4.Generate">
            <summary>
            Generates an observable sequence that contains a single 3x4 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix3x4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix3x4.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 3x4 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix3x4"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix3x4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix4">
            <summary>
            Represents an operator that creates a 4x4 matrix containing 3D rotation,
            scale, position and projection.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4.Row2">
            <summary>
            Gets or sets the third row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4.Row3">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4.Generate">
            <summary>
            Generates an observable sequence that contains a single 4x4 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 4x4 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix4"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix4x2">
            <summary>
            Represents an operator that creates a 4x2 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x2.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x2.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x2.Row2">
            <summary>
            Gets or sets the third row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x2.Row3">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4x2.Generate">
            <summary>
            Generates an observable sequence that contains a single 4x2 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4x2"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4x2.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 4x2 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix4x2"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4x2"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMatrix4x3">
            <summary>
            Represents an operator that creates a 4x3 matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x3.Row0">
            <summary>
            Gets or sets the top row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x3.Row1">
            <summary>
            Gets or sets the second row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x3.Row2">
            <summary>
            Gets or sets the third row of the matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMatrix4x3.Row3">
            <summary>
            Gets or sets the bottom row of the matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4x3.Generate">
            <summary>
            Generates an observable sequence that contains a single 4x3 matrix
            with the specified rows.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4x3"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMatrix4x3.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 4x3 matrices with the specified
            rows, and where each <see cref="T:OpenTK.Matrix4x3"/> object is emitted only
            when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4x3"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateMesh">
            <summary>
            Represents an operator that creates a new mesh geometry for each vertex
            array data in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMesh.DrawMode">
            <summary>
            Gets or sets a value specifying the kind of primitives to render
            with the vertex array data.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMesh.Usage">
            <summary>
            Gets or sets a value specifying the expected usage pattern of the
            vertex buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateMesh.VertexAttributes">
            <summary>
            Gets a collection of vertex attributes specifying how to map vertex
            array data into user-defined input values in the vertex shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{``0[]})">
            <summary>
            Creates a new mesh geometry for each vertex array data in an observable
            sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            The sequence of vertex array data representing the geometry used to
            create each new mesh.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing all vertex data for
            each array in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{System.Tuple{``0[],System.Byte[]}})">
            <summary>
            Creates a new mesh geometry for each pair of vertex and index data
            in an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            A sequence of pairs containing the vertex and index data representing
            the geometry used to create each new mesh, where each vertex index is
            stored as an 8-bit unsigned integer.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing geometry specified by
            each pair of vertex and index data in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{System.Tuple{``0[],System.Int32[]}})">
            <summary>
            Creates a new mesh geometry for each pair of vertex and index data
            in an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            A sequence of pairs containing the vertex and index data representing
            the geometry used to create each new mesh, where each vertex index is
            stored as a 32-bit signed integer.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing geometry specified by
            each pair of vertex and index data in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{System.Tuple{``0[],System.UInt32[]}})">
            <summary>
            Creates a new mesh geometry for each pair of vertex and index data
            in an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            A sequence of pairs containing the vertex and index data representing
            the geometry used to create each new mesh, where each vertex index is
            stored as a 32-bit unsigned integer.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing geometry specified by
            each pair of vertex and index data in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{System.Tuple{``0[],System.Int16[]}})">
            <summary>
            Creates a new mesh geometry for each pair of vertex and index data
            in an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            A sequence of pairs containing the vertex and index data representing
            the geometry used to create each new mesh, where each vertex index is
            stored as a 16-bit signed integer.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing geometry specified by
            each pair of vertex and index data in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process``1(System.IObservable{System.Tuple{``0[],System.UInt16[]}})">
            <summary>
            Creates a new mesh geometry for each pair of vertex and index data
            in an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the values used to represent each vertex in the mesh.
            </typeparam>
            <param name="source">
            A sequence of pairs containing the vertex and index data representing
            the geometry used to create each new mesh, where each vertex index is
            stored as a 16-bit unsigned integer.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing geometry specified by
            each pair of vertex and index data in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateMesh.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Creates a new mesh geometry for each vertex array data in an observable
            sequence.
            </summary>
            <param name="source">
            The sequence of multi-channel matrices storing the geometry data used
            to create each new mesh. Each row in the matrix represents the data for
            one vertex.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects storing all vertex data for
            each multi-channel matrix in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateOrthographic">
            <summary>
            Represents an operator that creates an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographic.Width">
            <summary>
            Gets or sets the width of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographic.Height">
            <summary>
            Gets or sets the height of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographic.NearClip">
            <summary>
            Gets or sets the distance to the near clip plane.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographic.FarClip">
            <summary>
            Gets or sets the distance to the far clip plane.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateOrthographic.Generate">
            <summary>
            Generates an observable sequence that returns a 4x4 orthographic
            projection matrix with the specified parameters.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateOrthographic.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of orthographic matrices with the
            specified parameters, where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateOrthographicOffCenter">
            <summary>
            Represents an operator that creates an orthographic projection matrix
            from specified projection volume boundaries.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.Left">
            <summary>
            Gets or sets the left edge of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.Right">
            <summary>
            Gets or sets the right edge of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.Bottom">
            <summary>
            Gets or sets the bottom edge of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.Top">
            <summary>
            Gets or sets the top edge of the projection volume.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.NearClip">
            <summary>
            Gets or sets the distance to the near clip plane.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateOrthographicOffCenter.FarClip">
            <summary>
            Gets or sets the distance to the far clip plane.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateOrthographicOffCenter.Generate">
            <summary>
            Generates an observable sequence that returns a 4x4 orthographic
            projection matrix with the specified parameters.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateOrthographicOffCenter.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of orthographic matrices with the
            specified parameters, where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreatePerspectiveFieldOfView">
            <summary>
            Represents an operator that creates a perspective projection matrix
            from field of view parameters.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveFieldOfView.FovY">
            <summary>
            Gets or sets the angle of the field of view in the y direction,
            in radians.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveFieldOfView.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the viewport.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveFieldOfView.NearClip">
            <summary>
            Gets or sets the distance to the near clip plane.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveFieldOfView.FarClip">
            <summary>
            Gets or sets the distance to the far clip plane.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreatePerspectiveFieldOfView.Generate">
            <summary>
            Generates an observable sequence that returns a 4x4 perspective
            projection matrix with the specified parameters.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreatePerspectiveFieldOfView.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of perspective matrices with the
            specified parameters, where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreatePerspectiveOffCenter">
            <summary>
            Represents an operator that creates a perspective projection matrix with
            the specified view frustum.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.Left">
            <summary>
            Gets or sets the left edge of the view frustum.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.Right">
            <summary>
            Gets or sets the right edge of the view frustum.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.Bottom">
            <summary>
            Gets or sets the bottom edge of the view frustum.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.Top">
            <summary>
            Gets or sets the top edge of the view frustum.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.NearClip">
            <summary>
            Gets or sets the distance to the near clip plane.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreatePerspectiveOffCenter.FarClip">
            <summary>
            Gets or sets the distance to the far clip plane.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreatePerspectiveOffCenter.Generate">
            <summary>
            Generates an observable sequence that returns a 4x4 perspective
            projection matrix with the specified parameters.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreatePerspectiveOffCenter.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of perspective matrices with the
            specified parameters, where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateQuaternionRotation">
            <summary>
            Represents an operator that creates a rotation matrix from a quaternion
            representation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateQuaternionRotation.Rotation">
            <summary>
            Gets or sets the quaternion representing the rotation transform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateQuaternionRotation.Generate">
            <summary>
            Generates an observable sequence that returns a rotation matrix
            corresponding to the specified quaternion.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateQuaternionRotation.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of rotation matrices from the
            specified quaternion, where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateRotationX">
            <summary>
            Represents an operator that creates a rotation matrix for a rotation
            about the x-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateRotationX.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the x-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationX.Generate">
            <summary>
            Generates an observable sequence that returns a rotation matrix
            for a rotation with the specified angle about the x-axis.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationX.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of rotation matrices for a rotation with
            the specified angle about the x-axis, where each <see cref="T:OpenTK.Matrix4"/>
            object is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateRotationY">
            <summary>
            Represents an operator that creates a rotation matrix for a rotation
            about the y-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateRotationY.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the y-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationY.Generate">
            <summary>
            Generates an observable sequence that returns a rotation matrix
            for a rotation with the specified angle about the y-axis.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationY.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of rotation matrices for a rotation with
            the specified angle about the y-axis, where each <see cref="T:OpenTK.Matrix4"/>
            object is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateRotationZ">
            <summary>
            Represents an operator that creates a rotation matrix for a rotation
            about the z-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateRotationZ.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationZ.Generate">
            <summary>
            Generates an observable sequence that returns a rotation matrix
            for a rotation with the specified angle about the z-axis.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateRotationZ.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of rotation matrices for a rotation with
            the specified angle about the z-axis, where each <see cref="T:OpenTK.Matrix4"/>
            object is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateScale">
            <summary>
            Represents an operator that creates a scale matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateScale.X">
            <summary>
            Gets or sets the scale factor for the x-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateScale.Y">
            <summary>
            Gets or sets the scale factor for the y-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateScale.Z">
            <summary>
            Gets or sets the scale factor for the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateScale.Generate">
            <summary>
            Generates an observable sequence that returns a scale matrix.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateScale.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of scale matrices, where each
            <see cref="T:OpenTK.Matrix4"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateTransform">
            <summary>
            Represents an operator that creates a model matrix specifying position,
            rotation and scale.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.CreateTransform"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTransform.Position">
            <summary>
            Gets or sets the position of the model, in the local coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTransform.Rotation">
            <summary>
            Gets or sets the quaternion representing the rotation of the model,
            in the local coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTransform.Scale">
            <summary>
            Gets or sets the scale vector applied to the model, in the local
            coordinate frame.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateTransform.Generate">
            <summary>
            Generates an observable sequence that returns a model matrix
            specifying position, rotation and scale.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateTransform.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of model matrices specifying position,
            rotation and scale, and where each <see cref="T:OpenTK.Matrix4"/> object is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateTranslation">
            <summary>
            Represents an operator that creates a translation matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTranslation.X">
            <summary>
            Gets or sets the translation along the x-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTranslation.Y">
            <summary>
            Gets or sets the translation along the y-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateTranslation.Z">
            <summary>
            Gets or sets the translation along the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateTranslation.Generate">
            <summary>
            Generates an observable sequence that returns a translation matrix.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Matrix4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateTranslation.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of translation matrices, where each
            <see cref="T:OpenTK.Matrix4"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new matrices.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateVector2">
            <summary>
            Represents an operator that creates a 2D vector element.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector2.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector2.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector2.Generate">
            <summary>
            Generates an observable sequence that returns a 2D vector element.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Vector2"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector2.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2D vectors, where each
            <see cref="T:OpenTK.Vector2"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new vectors.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Vector2"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateVector3">
            <summary>
            Represents an operator that creates a 3D vector element.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector3.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector3.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector3.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector3.Generate">
            <summary>
            Generates an observable sequence that returns a 3D vector element.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Vector3"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector3.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 3D vectors, where each
            <see cref="T:OpenTK.Vector3"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new vectors.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Vector3"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateVector4">
            <summary>
            Represents an operator that creates a 4D vector element.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector4.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector4.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector4.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateVector4.W">
            <summary>
            Gets or sets the w-component of the vector.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector4.Generate">
            <summary>
            Generates an observable sequence that returns a 4D vector element.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenTK.Vector4"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.CreateVector4.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 4D vectors, where each
            <see cref="T:OpenTK.Vector4"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new vectors.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Vector4"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.CreateWindow">
            <summary>
            Represents an operator that creates the shader window with the specified
            display style and render settings.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.CreateWindow"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.Width">
            <summary>
            Gets or sets the width of the shader window, in pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.Height">
            <summary>
            Gets or sets the height of the shader window, in pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.Title">
            <summary>
            Gets or sets the title of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.VSync">
            <summary>
            Gets or sets a value specifying the V-Sync configuration for shader
            window buffer swaps.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.SwapSync">
            <summary>
            Gets or sets a value specifying whether to synchronize buffer swaps
            across application windows.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.ClearColorHtml">
            <summary>
            Gets or sets an HTML representation of the clear color value for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.CursorVisible">
            <summary>
            Gets or sets a value specifying whether to hide or show the mouse cursor
            over the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.Location">
            <summary>
            Gets or sets a value specifying the starting location of the shader window.
            If no value is specified, the window will be located at the center of the screen.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.WindowBorder">
            <summary>
            Gets or sets a value specifying the shader window border.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.WindowState">
            <summary>
            Gets or sets a value specifying the starting state of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.DisplayDevice">
            <summary>
            Gets or sets a value specifying the display device index on which to
            create the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.TargetRenderFrequency">
            <summary>
            Gets or sets a value specifying the target render frequency. A value of zero
            indicates the maximum possible frequency will be used to generate render events.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.TargetUpdateFrequency">
            <summary>
            Gets or sets a value specifying the target update frequency. If no value is
            specified, the value of the target render frequency will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the initial render
            state of the shader window graphics context.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.CreateWindow.GraphicsMode">
            <summary>
            Gets or sets a value specifying the graphics mode of the shader window.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.CreateWindow.Generate">
            <summary>
            Generates an observable sequence that initializes and returns the
            shader window object. If a window has already been initialized, this
            source will return a reference to the created window.
            </summary>
            <returns>
            A sequence containing the <see cref="T:Bonsai.Shaders.ShaderWindow"/> object.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Delay">
            <summary>
            Represents an operator that delays the notification of values in the
            sequence by the specified time interval, using the render loop scheduler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Delay.DueTime">
            <summary>
            Gets or sets the time interval by which to delay the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Delay.DueTimeXml">
            <summary>
            Gets or sets an XML representation of the due time for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Delay.Process``1(System.IObservable{``0})">
            <summary>
            Delays the notification of values in an observable sequence by the
            specified time interval, using the render loop scheduler.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the source sequence.
            </typeparam>
            <param name="source">
            The source sequence to delay notifications for.
            </param>
            <returns>
            The time-shifted sequence, where all notifications will be raised
            in the render loop scheduler.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DelaySubscription">
            <summary>
            Represents an operator that delays subscription to the observable sequence
            by the specified time interval, using the render loop scheduler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DelaySubscription.DueTime">
            <summary>
            Gets or sets the time interval by which to delay subscription to the
            sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DelaySubscription.DueTimeXml">
            <summary>
            Gets or sets an XML representation of the due time for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DelaySubscription.Process``1(System.IObservable{``0})">
            <summary>
            Delays subscription to an observable sequence by the specified time
            interval, using the render loop scheduler.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The source sequence to delay subscription for.
            </param>
            <returns>
            The time-shifted sequence, where subscription is delayed by the
            specified time interval, using the render loop scheduler.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DispatchCompute">
            <summary>
            Represents an operator that launches one or more compute shader work
            groups for each notification in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DispatchCompute.ShaderName">
            <summary>
            Gets or sets the name of the compute shader program.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DispatchCompute.WorkGroups">
            <summary>
            Gets or sets a value specifying the number of workgroups to be
            launched when dispatching the compute shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DispatchCompute.Process``1(System.IObservable{``0})">
            <summary>
            Launches one or more compute shader work groups whenever the source
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to launch the compute
            shader work groups.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of launching one
            or more compute shader workgroups whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DispatchParameters">
            <summary>
            Represents parameters used when launching compute shader work groups.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.DispatchParameters.NumGroupsX">
            <summary>
            The number of work groups to be launched in the X dimension.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.DispatchParameters.NumGroupsY">
            <summary>
            The number of work groups to be launched in the Y dimension.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.DispatchParameters.NumGroupsZ">
            <summary>
            The number of work groups to be launched in the Z dimension.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure
            using the specified number of compute work groups.
            </summary>
            <param name="numGroupsX">
            The number of work groups to be launched in the X dimension.
            </param>
            <param name="numGroupsY">
            The number of work groups to be launched in the Y dimension.
            </param>
            <param name="numGroupsZ">
            The number of work groups to be launched in the Z dimension.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.Equals(Bonsai.Shaders.DispatchParameters)">
            <summary>
            Returns a value indicating whether this instance is equal to the
            specified <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure.
            </summary>
            <param name="other">
            The <see cref="T:Bonsai.Shaders.DispatchParameters"/> object to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents
            the same parameter values as this instance; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the specified object is a <see cref="T:Bonsai.Shaders.DispatchParameters"/>
            structure with the same parameter values as this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:Bonsai.Shaders.DispatchParameters"/>
            structure and has the same parameter values as this structure; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.op_Equality(Bonsai.Shaders.DispatchParameters,Bonsai.Shaders.DispatchParameters)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Shaders.DispatchParameters"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure on the left-hand side of the
            equality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure on the right-hand side of the
            equality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            have equal parameter values; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DispatchParameters.op_Inequality(Bonsai.Shaders.DispatchParameters,Bonsai.Shaders.DispatchParameters)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Shaders.DispatchParameters"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure on the left-hand side of the
            inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.DispatchParameters"/> structure on the right-hand side of the
            inequality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            differ in any of their parameter values; <see langword="false"/> if
            <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DispatchShaderQueue">
            <summary>
            Represents an operator that immediately starts processing the specified
            shader work queue whenever the sequence emits a notification.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DispatchShaderQueue.ShaderName">
            <summary>
            Gets or sets the name of the shader program.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DispatchShaderQueue.Process``1(System.IObservable{``0})">
            <summary>
            Immediately starts processing the specified shader work queue
            whenever the source sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start processing
            the specified shader work queue.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of immediately
            start processing the specified shader work queue whenever the sequence
            emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawArrays">
            <summary>
            Represents an operator that renders primitives using each of the array
            data in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawArrays.ShaderName">
            <summary>
            Gets or sets the name of the material shader program.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawArrays.DrawMode">
            <summary>
            Gets or sets a value specifying the kind of primitives to render
            with the vertex array data.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawArrays.Usage">
            <summary>
            Gets or sets a value specifying the expected usage pattern of the
            vertex buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawArrays.VertexAttributes">
            <summary>
            Gets the collection of vertex attributes specifying how to interpret
            the vertex array data.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DrawArrays.Process``1(System.IObservable{``0[]})">
            <summary>
            Renders primitives using each of the array data in an observable
            sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the array elements used to render each primitive.
            </typeparam>
            <param name="source">
            A sequence of vertex array data used to render each primitive.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            a primitive render operation where vertex data is drawn from each
            of the arrays in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DrawArrays.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Renders primitives using each of the matrix data in an observable
            sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the vertex array
            data used to render each primitive.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            a primitive render operation where vertex data is drawn from each
            of the matrices in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawFramebuffer">
            <summary>
            Represents an operator that renders all currently stored draw commands
            to a framebuffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawFramebuffer.RenderState">
            <summary>
            Gets a collection of state configuration objects specifying any
            render states that are required to render the framebuffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawFramebuffer.FramebufferAttachments">
            <summary>
            Gets a collection of configuration objects specifying any attachments
            that are required to render the framebuffer.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DrawFramebuffer.Process``1(System.IObservable{``0})">
            <summary>
            Renders all currently stored draw commands to a framebuffer whenever
            an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start rendering all
            stored draw commands to a framebuffer.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of rendering all
            stored draw commands to a framebuffer whenever the sequence emits a
            notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawMesh">
            <summary>
            Represents an operator that draws the specified mesh geometry.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMesh.ShaderName">
            <summary>
            Gets or sets the name of the material shader program used in the
            drawing operation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMesh.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry to draw.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DrawMesh.Process``1(System.IObservable{``0})">
            <summary>
            Draws the specified mesh geometry whenever an observable sequence
            emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start drawing the
            specified mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of drawing the
            specified mesh geometry whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DrawMesh.Process(System.IObservable{Bonsai.Shaders.Mesh})">
            <summary>
            Draws each of the mesh geometries in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Shaders.Mesh"/> objects representing the geometry
            to draw. If <see cref="P:Bonsai.Shaders.DrawMesh.MeshName"/> is specified, the named mesh
            geometry will be used instead.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of drawing each
            of the mesh geometries in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawMeshAggregate">
            <summary>
            Represents an operator that aggregates the specified mesh geometry
            attributes into a single draw command.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshAggregate.ShaderName">
            <summary>
            Gets or sets the name of the material shader program used in the
            drawing operation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshAggregate.MeshNames">
            <summary>
            Gets the collection of references to pre-declared mesh geometry specifying
            the set of attributes to aggregate for drawing.
            </summary>
            <remarks>
            Each mesh geometry will have all its attributes combined into the final
            rendered buffer, as if they are all part of the same mesh.
            </remarks>
        </member>
        <member name="M:Bonsai.Shaders.DrawMeshAggregate.Process``1(System.IObservable{``0})">
            <summary>
            Draws the aggregate mesh geometry whenever an observable sequence
            emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start drawing the
            aggregate mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of drawing the
            aggregate mesh geometry whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawMeshInstanced">
            <summary>
            Represents an operator that draws the specified mesh geometry using instanced
            rendering, where each array in the sequence stores the per-instance attributes.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshInstanced.ShaderName">
            <summary>
            Gets or sets the name of the material shader program used in the
            drawing operation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshInstanced.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshInstanced.Usage">
            <summary>
            Gets or sets a value specifying the expected usage pattern of the
            instance buffer data.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawMeshInstanced.InstanceAttributes">
            <summary>
            Gets a collection of instance attributes specifying how to map instance
            buffer data into per-instance input values in the vertex shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DrawMeshInstanced.Process``1(System.IObservable{``0[]})">
            <summary>
            Draws the specified mesh geometry using instanced rendering, where
            each array in an observable sequence stores the per-instance attributes.
            </summary>
            <typeparam name="TVertex">
            The type of the array elements used to store the per-instance attributes.
            </typeparam>
            <param name="source">
            A sequence of per-instance attribute data used to render each instance.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an instanced rendering operation where instance attribute data is drawn
            from each of the arrays in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.DrawMeshInstanced.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Draws the specified mesh geometry using instanced rendering, where
            each of the matrix data in an observable sequence stores the
            per-instance attributes.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the per-instance
            attribute data used to render each instance.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an instanced rendering operation where instance attribute data is drawn
            from each of the matrices in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.DrawShader">
            <summary>
            Represents an operator that issues a shader draw call. This type is
            obsolete, please use <see cref="T:Bonsai.Shaders.DrawMesh"/> instead.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawShader.ShaderName">
            <summary>
            Gets or sets the name of the material shader program used in the
            drawing operation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.DrawShader.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry to draw.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.DrawShader.Process``1(System.IObservable{``0})">
            <summary>
            Draws the specified mesh geometry whenever an observable sequence
            emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start drawing the
            specified mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of drawing the
            specified mesh geometry whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Effect">
            <summary>
            Provides an abstract base class for common functionality used in render
            effects specifying a vertex, geometry or fragment shader.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Effect.CreateShader">
            <summary>
            Compiles the effect shader and returns the program object handle.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.ExtractRotation">
            <summary>
            Represents an operator that returns the rotation component of every
            matrix in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ExtractRotation.RowNormalize">
            <summary>
            Gets or sets a value indicating whether to row-normalize the input
            matrix. Keep this unless you know the input is already normalized.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ExtractRotation.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Returns the rotation component of every 4x4 matrix in an observable
            sequence.
            </summary>
            <param name="source">
            The sequence of 4x4 matrices for which to extract the rotation
            component.
            </param>
            <returns>
            A <see cref="T:OpenTK.Quaternion"/> object representing the rotation component
            of each 4x4 matrix in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.ExtractScale">
            <summary>
            Represents an operator that returns the scale component of every matrix
            in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ExtractScale.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Returns the scale component of every 4x4 matrix in an observable
            sequence.
            </summary>
            <param name="source">
            The sequence of 4x4 matrices for which to extract the scale
            component.
            </param>
            <returns>
            A <see cref="T:OpenTK.Vector3"/> object representing the scale component
            of each 4x4 matrix in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.ExtractTranslation">
            <summary>
            Represents an operator that returns the translation component of every
            matrix in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ExtractTranslation.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Returns the translation component of every 4x4 matrix in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of 4x4 matrices for which to extract the translation
            component.
            </param>
            <returns>
            A <see cref="T:OpenTK.Vector3"/> object representing the translation component
            of each 4x4 matrix in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.ExtrinsicsTransform">
            <summary>
            Represents an operator that converts extrinsics rotation and translation
            vectors in the sequence into a transform matrix, and vice-versa.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ExtrinsicsTransform.Scale">
            <summary>
            Gets or sets a 3D vector specifying the optional scale factor for
            rotation and translation vectors.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ExtrinsicsTransform.ScaleSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Shaders.ExtrinsicsTransform.Scale"/> property
            should be serialized.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ExtrinsicsTransform.Process(System.IObservable{System.Tuple{OpenCV.Net.Point3d,OpenCV.Net.Point3d}})">
            <summary>
            Converts each pair of extrinsics rotation and translation vectors
            in an observable sequence into a transform matrix.
            </summary>
            <param name="source">
            A sequence of pairs containing the extrinsics rotation and translation
            vectors to convert into a transform matrix.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Matrix4"/> objects corresponding to each
            pair of extrinsics rotation and translation vectors in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ExtrinsicsTransform.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Converts each transform matrix in an observable sequence into a pair
            of extrinsics rotation and translation vectors.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenTK.Matrix4"/> objects representing the transform
            matrix to convert into a pair of extrinsics rotation and translation
            vectors.
            </param>
            <returns>
            A sequence of pairs of extrinsics rotation and translation vectors
            corresponding to each transform matrix in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.FrameEvent">
            <summary>
            Represents an update or render frame event raised by the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.FrameEvent.TimeStep">
            <summary>
            Gets the amount of time elapsed since the last update.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Input.GamePad">
            <summary>
            Represents an operator that generates a sequence with the current state
            of the specified gamepad device.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.GamePad.Index">
            <summary>
            Gets or sets the index of the gamepad device.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.GamePad.Generate">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified gamepad device.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.GamePadState"/> values representing the
            current state of the gamepad device.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.GamePad.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified gamepad device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to check
            for the current state of the gamepad device.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.GamePadState"/> values representing the
            current state of the gamepad device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.Keyboard">
            <summary>
            Represents an operator that generates a sequence with the current state
            of the specified keyboard device.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.Keyboard.Index">
            <summary>
            Gets or sets the index of the keyboard device. If it is not specified,
            the combined state of all devices is retrieved.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.Keyboard.Generate">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified keyboard device.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.KeyboardState"/> values representing the
            current state of the keyboard device.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.Keyboard.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified keyboard device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to check
            for the current state of the keyboard device.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.KeyboardState"/> values representing the
            current state of the keyboard device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.KeyDown">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            a key is pressed while the shader window has focus.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.KeyDown.Key">
            <summary>
            Gets or sets a value specifying an optional key to use as a filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.KeyDown.Modifiers">
            <summary>
            Gets or sets a value specifying optional key modifiers to use as
            a filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.KeyDown.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever a key
            is pressed while the shader window has focus.
            </summary>
            <returns>
            A sequence of events containing <see cref="T:OpenTK.Input.KeyboardKeyEventArgs"/> event
            data produced whenever a key is pressed while the shader window has focus.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.KeyPress">
            <summary>
            Represents an operator that generates a sequence of characters produced
            whenever a key is pressed while the shader window has focus.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.KeyPress.KeyChar">
            <summary>
            Gets or sets a value specifying an optional character to use as a filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.KeyPress.Generate">
            <summary>
            Generates an observable sequence that produces a character whenever the
            corresponding key is pressed while the shader window has focus.
            </summary>
            <returns>
            A sequence of events containing <see cref="T:OpenTK.KeyPressEventArgs"/> event
            data produced whenever a character key is pressed while the shader window
            has focus.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.KeyUp">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            a key is released while the shader window has focus.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.KeyUp.Key">
            <summary>
            Gets or sets a value specifying an optional key to use as a filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.KeyUp.Modifiers">
            <summary>
            Gets or sets a value specifying optional key modifiers to use as
            a filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.KeyUp.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever a key
            is released while the shader window has focus.
            </summary>
            <returns>
            A sequence of events containing <see cref="T:OpenTK.Input.KeyboardKeyEventArgs"/> event
            data produced whenever a key is released while the shader window has focus.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.Mouse">
            <summary>
            Represents an operator that generates a sequence with the current state
            of the specified mouse device.
            </summary>
            <remarks>
            The position and wheel values are defined in a hardware-specific coordinate system.
            </remarks>
        </member>
        <member name="P:Bonsai.Shaders.Input.Mouse.Index">
            <summary>
            Gets or sets the index of the mouse device. If it is not specified,
            the combined state of all devices is retrieved.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.Mouse.Generate">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified mouse device.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.MouseState"/> values representing the
            current state of the mouse device.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.Mouse.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the specified mouse device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to check
            for the current state of the mouse device.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.MouseState"/> values representing the
            current state of the mouse device, at the time the
            <paramref name="source"/> sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseCursor">
            <summary>
            Represents an operator that generates a sequence with the current state
            of the mouse cursor. The position is defined in absolute desktop points,
            with the origin placed at the top-left corner of the display.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseCursor.Generate">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the mouse cursor.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.MouseState"/> values representing the
            current state of the mouse cursor.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseCursor.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence where each element represents the
            current state of the mouse cursor, at the time the <paramref name="source"/>
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications indicating when to check
            for the current state of the mouse cursor.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Input.MouseState"/> values representing the
            current state of the mouse cursor, at the time the
            <paramref name="source"/> sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseDown">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            a mouse button is pressed over the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.MouseDown.Button">
            <summary>
            Gets or sets a value specifying an optional mouse button to use as
            a filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseDown.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever a mouse
            button is pressed over the shader window.
            </summary>
            <returns>
            A sequence of events containing <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> event
            data produced whenever a mouse button is pressed over the shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseEnter">
            <summary>
            Represents an operator that generates a sequence of events produced
            whenever the mouse cursor enters the shader window bounds.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseEnter.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            mouse cursor enters the shader window bounds.
            </summary>
            <returns>
            A sequence of events produced whenever the mouse cursor enters the
            shader window bounds.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseLeave">
            <summary>
            Represents an operator that generates a sequence of events produced
            whenever the mouse cursor leaves the shader window bounds.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseLeave.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            mouse cursor leaves the shader window bounds.
            </summary>
            <returns>
            A sequence of events produced whenever the mouse cursor leaves the
            shader window bounds.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseMove">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            the mouse is moved over the shader window.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseMove.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            mouse is moved over the shader window.
            </summary>
            <returns>
            A sequence of events produced whenever the mouse is moved over the
            shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseUp">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            a mouse button is released over the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Input.MouseUp.Button">
            <summary>
            Gets or sets a value specifying an optional mouse button to use as
            a filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseUp.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever a mouse
            button is released over the shader window.
            </summary>
            <returns>
            A sequence of events containing <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> event
            data produced whenever a mouse button is released over the shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.MouseWheel">
            <summary>
            Represents an operator that generates a sequence of events produced whenever
            the mouse wheel is moved over the shader window.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.MouseWheel.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            mouse wheel is moved over the shader window.
            </summary>
            <returns>
            A sequence of events produced whenever the mouse wheel is moved over
            the shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Input.NormalizedDeviceCoordinates">
            <summary>
            Represents an operator that converts each point in the sequence from window
            client coordinates into normalized device coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Input.NormalizedDeviceCoordinates.Process(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,OpenTK.Input.MouseEventArgs}})">
            <summary>
            Converts each point in an observable sequence of mouse device event data
            from window client coordinates into normalized device coordinates.
            </summary>
            <param name="source">
            A sequence of events containing <see cref="T:OpenTK.Input.MouseEventArgs"/> event data.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Vector2"/> values representing the normalized
            device coordinates corresponding to the window client location stored in
            the event data.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.NormalizedDeviceCoordinates.Process(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,OpenTK.Input.MouseButtonEventArgs}})">
            <summary>
            Converts each point in an observable sequence of mouse button event data
            from window client coordinates into normalized device coordinates.
            </summary>
            <param name="source">
            A sequence of events containing <see cref="T:OpenTK.Input.MouseButtonEventArgs"/> event data.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Vector2"/> values representing the normalized
            device coordinates corresponding to the window client location stored in
            the event data.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.NormalizedDeviceCoordinates.Process(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,OpenTK.Input.MouseMoveEventArgs}})">
            <summary>
            Converts each point in an observable sequence of mouse move event data
            from window client coordinates into normalized device coordinates.
            </summary>
            <param name="source">
            A sequence of events containing <see cref="T:OpenTK.Input.MouseMoveEventArgs"/> event data.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Vector2"/> values representing the normalized
            device coordinates corresponding to the window client location stored in
            the event data.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Input.NormalizedDeviceCoordinates.Process(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,OpenTK.Input.MouseWheelEventArgs}})">
            <summary>
            Converts each point in an observable sequence of mouse wheel event data
            from window client coordinates into normalized device coordinates.
            </summary>
            <param name="source">
            A sequence of events containing <see cref="T:OpenTK.Input.MouseWheelEventArgs"/> event data.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Vector2"/> values representing the normalized
            device coordinates corresponding to the window client location stored in
            the event data.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.InstanceAttributeMapping">
            <summary>
            Represents the format of a per-instance defined input value to a
            vertex shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.InstanceAttributeMapping.Divisor">
            <summary>
            Gets or sets a value specifying the number of instances that each attribute
            in the buffer represents during instanced rendering.
            </summary>
            <remarks>
            If divisor is zero, the attribute advances once per vertex. If divisor
            is non-zero, the attribute advances once per divisor instances of the
            sets of vertices being rendered.
            </remarks>
        </member>
        <member name="M:Bonsai.Shaders.InstanceAttributeMapping.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.InstanceAttributeMappingCollection">
            <summary>
            Represents a collection of <see cref="T:Bonsai.Shaders.InstanceAttributeMapping"/> objects.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Invert">
            <summary>
            Represents an operator that converts every matrix in the sequence to
            its inverse.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Invert.Process(System.IObservable{OpenTK.Matrix3})">
            <summary>
            Converts every 3x3 matrix in an observable sequence to its inverse.
            </summary>
            <param name="source">The sequence of 3x3 matrices to invert.</param>
            <returns>The sequence of inverted 3x3 matrices.</returns>
        </member>
        <member name="M:Bonsai.Shaders.Invert.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Converts every 4x4 matrix in an observable sequence to its inverse.
            </summary>
            <param name="source">The sequence of 4x4 matrices to invert.</param>
            <returns>The sequence of inverted 4x4 matrices.</returns>
        </member>
        <member name="T:Bonsai.Shaders.LatestOnRenderFrame">
            <summary>
            Represents an operator that replays the latest notification of the
            sequence at each render frame event.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LatestOnRenderFrame.Process``1(System.IObservable{``0})">
            <summary>
            Replays the latest notification of an observable sequence at each
            render frame event.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The observable sequence whose latest notification will be replayed
            at each render frame event.
            </param>
            <returns>
            The sequence of replayed values from the <paramref name="source"/>
            sequence, sampled at each render frame event.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.LatestOnUpdateFrame">
            <summary>
            Represents an operator that replays the latest notification of the
            sequence at each update frame event.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LatestOnUpdateFrame.Process``1(System.IObservable{``0})">
            <summary>
            Replays the latest notification of an observable sequence at each
            update frame event.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The observable sequence whose latest notification will be replayed
            at each update frame event.
            </param>
            <returns>
            The sequence of replayed values from the <paramref name="source"/>
            sequence, sampled at each update frame event.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.LoadImage">
            <summary>
            Represents an operator that loads a texture buffer from the specified image file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.Width">
            <summary>
            Gets or sets the width of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.Height">
            <summary>
            Gets or sets the height of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.FileName">
            <summary>
            Gets or sets the name of the image file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.ColorType">
            <summary>
            Gets or sets a value specifying the color type of the loaded image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImage.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to the loaded image.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LoadImage.Generate">
            <summary>
            Generates an observable sequence that returns a texture buffer loaded
            from the specified image file.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.Texture"/>
            class representing the data loaded from the specified image file.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.LoadImage.Generate``1(System.IObservable{``0})">
            <summary>
            Returns a texture buffer loaded from the specified image file whenever
            an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start loading a
            new texture buffer from the specified image file.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects loaded from the
            specified image file whenever the <paramref name="source"/> sequence
            emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.LoadImageSequence">
            <summary>
            Represents an operator that loads an image texture sequence from the
            specified movie file or image sequence pattern.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.Width">
            <summary>
            Gets or sets the width of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.Height">
            <summary>
            Gets or sets the height of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.FileName">
            <summary>
            Gets or sets the path to a movie file or image sequence search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to individual frames.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.FrameCount">
            <summary>
            Gets or sets the maximum number of frames to include in the image sequence.
            </summary>
            <remarks>
            If no value is specified, all frames in the video will be loaded in the
            image sequence.
            </remarks>
        </member>
        <member name="P:Bonsai.Shaders.LoadImageSequence.StartPosition">
            <summary>
            Gets or sets the offset, in frames, at which the image sequence should start.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LoadImageSequence.Generate">
            <summary>
            Generates an observable sequence that returns an image texture sequence
            initialized from the specified movie file or image sequence pattern.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.Texture"/>
            class representing the image texture sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.LoadImageSequence.Generate``1(System.IObservable{``0})">
            <summary>
            Returns an image texture sequence initialized from the specified movie
            file or image sequence pattern whenever an observable sequence emits a
            notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start loading a
            new image texture sequence.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects initialized from the
            specified movie file or image sequence pattern whenever the
            <paramref name="source"/> sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.LoadResources">
            <summary>
            Represents an operator that loads a collection of resources into the
            resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LoadResources.Process(System.IObservable{Bonsai.Resources.ResourceConfigurationCollection})">
            <summary>
            Loads a collection of resources into the resource manager.
            </summary>
            <param name="source">
            The sequence containing the collection of resources to be loaded in the
            resource manager.
            </param>
            <returns>
            A sequence of <see cref="T:System.IDisposable"/> objects which can be used to unload
            the loaded resources.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.LoadVideo">
            <summary>
            Represents an operator that initializes a video texture which is
            dynamically updated from the specified movie file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.Width">
            <summary>
            Gets or sets the width of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.Height">
            <summary>
            Gets or sets the height of the texture. If no value is specified, the
            texture buffer will not be initialized.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.FileName">
            <summary>
            Gets or sets the path to a movie file.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to individual frames.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.FrameCount">
            <summary>
            Gets or sets the maximum number of frames to include in the video sequence.
            </summary>
            <remarks>
            If no value is specified, all frames in the video will be played.
            </remarks>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.StartPosition">
            <summary>
            Gets or sets the offset, in frames, at which the video sequence should start.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.LoadVideo.BufferLength">
            <summary>
            Gets or sets the size of the pre-loading buffer for video frames.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.LoadVideo.Generate">
            <summary>
            Generates an observable sequence that returns a video texture
            initialized from the specified movie file.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.Texture"/>
            class representing the video texture.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.LoadVideo.Generate``1(System.IObservable{``0})">
            <summary>
            Returns a video texture initialized from the specified movie file
            whenever an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start loading a
            new video texture.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects initialized from the
            specified movie file whenever the <paramref name="source"/> sequence
            emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Material">
            <summary>
            Provides functionality for rendering geometry using a shaded material
            pass using the specified vertex, geometry or fragment shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Material.Mesh">
            <summary>
            Gets the geometry to draw when running the material pass.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Material.OnDispatch">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.MatrixTransform">
            <summary>
            Provides an abstract base class for operators specifying cumulative matrix
            transform operations.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.MatrixTransform.Order">
            <summary>
            Gets or sets a value specifying the order of relative matrix
            transform operations.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.MatrixTransform.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            When overridden in a derived class, initializes the matrix transform
            that should be combined with each element in the sequence. 
            </summary>
            <param name="result">
            When this method returns, contains the relative matrix transform
            to be combined with each element in the sequence.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.MatrixTransform.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Performs a relative matrix transform operation on each matrix in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of transform matrices to be combined with the specified
            relative matrix transform.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Matrix4"/> objects representing the combined
            transform.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.MatrixOrder">
            <summary>
            Specifies the transformation order for cumulative matrix transform operations.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.MatrixOrder.Append">
            <summary>
            Specifies that the new operation is applied after the preceding transform.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.MatrixOrder.Prepend">
            <summary>
            Specifies that the new operation is applied before the preceding transform.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.Mesh">
            <summary>
            Represents a collection of vertices and indices used to describe
            arbitrary geometry.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Mesh"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.Bounds">
            <summary>
            Gets or sets the axis-aligned bounding box of the mesh vertices.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.VertexCount">
            <summary>
            Gets or sets the number of vertices in the mesh vertex buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.DrawMode">
            <summary>
            Gets or sets a value specifying the draw mode to use for rendering
            the mesh.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.ElementArrayType">
            <summary>
            Gets or sets a value specifying the type of the elements in the element
            array object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.VertexBuffer">
            <summary>
            Gets the handle to the vertex buffer object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.VertexArray">
            <summary>
            Gets the handle to the vertex array object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Mesh.ElementArray">
            <summary>
            Gets the handle to the element array object.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Mesh.EnsureElementArray">
            <summary>
            Ensures the element array object is initialized.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Mesh.Draw">
            <summary>
            Renders primitives from mesh vertex array data.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Mesh.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Shaders.Mesh"/> class.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.MeshBounds">
            <summary>
            Represents an operator that retrieves the bounds of the specified mesh
            geometry.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.MeshBounds.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry for which to retrieve
            the bounds.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.MeshBounds.Generate">
            <summary>
            Retrieves the bounds of the specified mesh geometry and surfaces them
            through an observable sequence.
            </summary>
            <returns>
            A sequence containing the retrieved mesh <see cref="T:Bonsai.Shaders.Bounds"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.MeshBounds.Generate``1(System.IObservable{``0})">
            <summary>
            Retrieves the bounds of the specified mesh geometry whenever an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for retrieving mesh
            bounds.
            </param>
            <returns>
            The sequence of retrieved mesh <see cref="T:Bonsai.Shaders.Bounds"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.MeshName">
            <summary>
            Represents the properties of a mesh geometry which is part of an aggregate
            rendering operation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.MeshName.Name">
            <summary>
            Gets or sets the name of the mesh geometry to aggregate.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.MeshName.Divisor">
            <summary>
            Gets or sets a value specifying the number of instances that each attribute
            in the mesh geometry buffer represents during instanced rendering.
            </summary>
            <remarks>
            If divisor is zero, the attribute advances once per vertex. If divisor
            is non-zero, the attribute advances once per divisor instances of the
            sets of vertices being rendered.
            </remarks>
        </member>
        <member name="T:Bonsai.Shaders.MeshNameConverter">
            <summary>
            Provides a type converter to convert a mesh name to and from other
            representations. It also provides a mechanism to find existing meshes
            which have been declared in the workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.MeshNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.MeshNameConverter"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.MeshNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.MeshResources">
            <summary>
            Represents an operator that creates a collection of mesh resources to
            be loaded into the resource manager.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.MeshResources.Meshes">
            <summary>
            Gets the collection of mesh resources to be loaded into the resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.MeshResources.GetResources">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.NormalMatrix">
            <summary>
            Represents an operator that computes the normal matrix for each
            modelview matrix in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.NormalMatrix.Process(System.IObservable{OpenTK.Matrix3})">
            <summary>
            Computes the normal matrix for each 3x3 modelview matrix in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of 3x3 modelview matrices for which to compute the
            normal matrix.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Matrix3"/> objects representing the normal
            matrix for each modelview matrix in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.NormalMatrix.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Computes the normal matrix for each 4x4 modelview matrix in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of 4x4 modelview matrices for which to compute the
            normal matrix.
            </param>
            <returns>
            A sequence of <see cref="T:OpenTK.Matrix4"/> objects representing the normal
            matrix for each modelview matrix in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.PlayTextureSequence">
            <summary>
            Represents an operator that starts playing the frame sequence of a
            video texture or texture array.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.PlayTextureSequence.TextureName">
            <summary>
            Gets or sets the name of the texture sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.PlayTextureSequence.PlaybackRate">
            <summary>
            Gets or sets the rate at which to playback the sequence. A value of
            zero means the native frame rate will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.PlayTextureSequence.Loop">
            <summary>
            Gets or sets a value indicating whether the video should loop when
            the end of the file is reached.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.PlayTextureSequence.Process">
            <summary>
            Generates an observable sequence that starts playing the frames of
            a video texture or texture array in order.
            </summary>
            <returns>
            An observable sequence reporting the zero-based index of the frame
            which is currently active in the specified texture.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.PlayTextureSequence.Process(System.IObservable{Bonsai.Shaders.Texture})">
            <summary>
            Starts playing the frames of the video texture or texture array in
            an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects for which to start
            playing the frames in orer. The texture must be either a video
            texture or a texture array.
            </param>
            <returns>
            An observable sequence reporting the zero-based index of the frame
            which is currently active in the specified texture.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.PlayTextureSequence.Process``1(System.IObservable{``0})">
            <summary>
            Starts playing the frames of a video texture or texture array
            in order whenever an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to start playing the
            video texture or texture array.
            </param>
            <returns>
            An observable sequence reporting the zero-based index of the frame
            which is currently active in the specified texture.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.QuadEffects">
            <summary>
            Specifies available fullscreen quad rendering effects.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.QuadEffects.None">
            <summary>
            Specifies the quad should not be flipped.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.QuadEffects.FlipHorizontally">
            <summary>
            Specifies the quad should be flipped horizontally.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.QuadEffects.FlipVertically">
            <summary>
            Specifies the quad should be flipped vertically.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.QuadEffects.FlipBoth">
            <summary>
            Specifies the quad should be flipped both vertically and horizontally.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.ReadPixels">
            <summary>
            Represents an operator that reads a block of pixels from the framebuffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ReadPixels.RegionOfInterest">
            <summary>
            Gets or sets the pixel region of interest to read from the framebuffer,
            in upper left coordinates. If no region is specified, the entire
            framebuffer is read.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ReadPixels.Generate">
            <summary>
            Generates an observable sequence that reads a block of pixels from
            the framebuffer and returns the data as an image object.
            </summary>
            <returns>
            An observable sequence with a single <see cref="T:OpenCV.Net.IplImage"/> object
            storing the pixels read from the framebuffer at the next state update.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ReadPixels.Generate``1(System.IObservable{``0})">
            <summary>
            Reads a block of pixels from the framebuffer whenever an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to read a block of
            pixels from the framebuffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects storing the pixels
            read from the framebuffer whenever the <paramref name="source"/>
            sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RenderCubemap">
            <summary>
            Represents an operator that renders all currently stored draw commands
            to one of the cubemap textures. Each pass renders one face of the
            cubemap in the order +X, -X, +Y, -Y, +Z, -Z.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderCubemap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.RenderCubemap"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the render
            states to be set when rendering the cubemap.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.ClearColorHtml">
            <summary>
            Gets or sets an XML representation of the clear color for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.FaceSize">
            <summary>
            Gets or sets the texture size for each of the cubemap faces. If no
            value is specified, the size of the shader window in pixels is used.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the cubemap.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemap.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderCubemap.Process``1(System.IObservable{``0})">
            <summary>
            Renders all currently stored draw commands to one of the cubemap textures
            whenever an observable sequence emits a notification. Each pass renders
            one face of the cubemap in the order +X, -X, +Y, -Y, +Z, -Z.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to render each of the cubemap faces.
            </param>
            <returns>
            A sequence returning the <see cref="T:Bonsai.Shaders.Texture"/> object representing the
            cubemap texture, whenever all six faces of the cubemap have been updated.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RenderCubemapTarget">
            <summary>
            Represents an operator that renders all currently stored draw commands
            to a cubemap render target.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderCubemapTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.RenderCubemapTarget"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the render
            states to be set when rendering the cubemap.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.ClearColorHtml">
            <summary>
            Gets or sets an XML representation of the clear color for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.TextureName">
            <summary>
            Gets or sets the name of the cubemap texture to update.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderCubemapTarget.TextureTarget">
            <summary>
            Gets or sets a value specifying which cubemap texture target to update.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderCubemapTarget.Process``1(System.IObservable{``0})">
            <summary>
            Renders all currently stored draw commands to a cubemap render target
            whenever an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to start rendering to the cubemap
            target.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of rendering the
            specified cubemap target whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RenderFrame">
            <summary>
            Represents an operator that generates a sequence of events produced
            whenever it is time to render a new frame.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderFrame.Generate">
            <summary>
            Generates an observable sequence that emits a notification whenever
            it is time to render a new frame.
            </summary>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.FrameEvent"/> objects produced whenever it
            is time to render a new frame.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RenderTexture">
            <summary>
            Represents an operator that renders all currently stored draw commands
            to a texture.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.RenderTexture"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the render
            states to be set when rendering the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.ClearColorHtml">
            <summary>
            Gets or sets an XML representation of the clear color for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.ClearMask">
            <summary>
            Gets or sets a value specifying which buffers to clear before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.Width">
            <summary>
            Gets or sets the width of the texture. If no value is specified, the
            texture buffer will be initialized to the width of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.Height">
            <summary>
            Gets or sets the height of the texture. If no value is specified, the
            texture buffer will be initialized to the height of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal storage format of the
            render texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RenderTexture.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RenderTexture.Process``1(System.IObservable{``0})">
            <summary>
            Renders all currently stored draw commands to a texture whenever an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to start the render to texture.
            </param>
            <returns>
            A sequence returning the <see cref="T:Bonsai.Shaders.Texture"/> object representing the
            render target, whenever the render to texture operation completes.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.ResourceLoader">
            <summary>
            Provides the abstract base class for operators that load resources into
            the shader window resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ResourceLoader.Process(System.IObservable{OpenTK.INativeWindow})">
            <summary>
            Bundles a set of resources to be loaded into the shader window
            resource manager.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenTK.INativeWindow"/> objects into which the resources
            will be loaded.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects which
            can be used to load resources into the resource manager.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ResourceLoader.Process``1(System.IObservable{System.Reactive.EventPattern{OpenTK.INativeWindow,``0}})">
            <summary>
            Bundles a set of resources to be loaded into the shader window resource
            manager when an observable sequence of window events emits a notification.
            </summary>
            <typeparam name="TEventArgs">
            The type of the event data generated by the window event.
            </typeparam>
            <param name="source">
            A sequence of event data generated from a shader window.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects which
            can be used to load resources into the resource manager.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RetrieveImage">
            <summary>
            Represents an operator that reads the pixel data from each texture in the
            sequence to an image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RetrieveImage.Depth">
            <summary>
            Gets or sets the bit depth of each pixel in the retrieved image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RetrieveImage.Channels">
            <summary>
            Gets or sets the number of channels in the retrieved image.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RetrieveImage.FlipMode">
            <summary>
            Gets or sets a value specifying the flip mode applied to the
            retrieved image.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RetrieveImage.Process(System.IObservable{Bonsai.Shaders.Texture})">
            <summary>
            Reads the pixel data from each texture in an observable sequence to
            an image.
            </summary>
            <param name="source">
            The sequence of texture objects from which to retrieve the pixel data.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects containing the pixel data
            for each texture in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.RotateAxisAngle">
            <summary>
            Represents an operator that applies a rotation around an arbitrary axis
            to every transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateAxisAngle.Axis">
            <summary>
            Gets or sets a 3D vector specifying the direction of the axis of rotation.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateAxisAngle.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateAxisAngle.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for applying a rotation around the
            specified axis.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.RotateQuaternion">
            <summary>
            Represents an operator that applies a rotation specified by a quaternion
            to every transform in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateQuaternion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.RotateQuaternion"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateQuaternion.Rotation">
            <summary>
            Gets or sets the quaternion representing the rotation transform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateQuaternion.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for applying a rotation specified by
            a quaternion.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.RotateX">
            <summary>
            Represents an operator that applies a rotation about the x-axis to every
            transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateX.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the x-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateX.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for a rotation about the x-axis.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.RotateY">
            <summary>
            Represents an operator that applies a rotation about the y-axis to every
            transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateY.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the y-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateY.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for a rotation about the y-axis.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.RotateZ">
            <summary>
            Represents an operator that applies a rotation about the z-axis to every
            transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.RotateZ.Angle">
            <summary>
            Gets or sets the angle describing the magnitude of the rotation
            about the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.RotateZ.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for a rotation about the z-axis.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.SampleOnRenderFrame">
            <summary>
            Represents an operator that samples notifications from the sequence
            whenever there is a new render frame event.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.SampleOnRenderFrame.Process``1(System.IObservable{``0})">
            <summary>
            Samples notifications from an observable sequence whenever there is
            a new render frame event.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The observable sequence whose notifications will be sampled
            at each render frame event.
            </param>
            <returns>
            The sequence of sampled notifications from the <paramref name="source"/>
            sequence, emitted at each render frame event.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.SampleOnUpdateFrame">
            <summary>
            Represents an operator that samples notifications from the sequence
            whenever there is a new update frame event.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.SampleOnUpdateFrame.Process``1(System.IObservable{``0})">
            <summary>
            Samples notifications from an observable sequence whenever there is
            a new update frame event.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The observable sequence whose notifications will be sampled
            at each update frame event.
            </param>
            <returns>
            The sequence of sampled notifications from the <paramref name="source"/>
            sequence, emitted at each update frame event.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Scale">
            <summary>
            Represents an operator that applies a scale factor along the specified
            axes to every transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Scale.X">
            <summary>
            Gets or sets the scale factor for the x-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Scale.Y">
            <summary>
            Gets or sets the scale factor for the y-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Scale.Z">
            <summary>
            Gets or sets the scale factor for the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Scale.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for applying a scale factor along
            the specified axes.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Shader">
            <summary>
            Provides common functionality for executing and updating the state of
            compiled shader programs.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Shader.Name">
            <summary>
            Gets the name of the shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Shader.Program">
            <summary>
            Gets the handle to the shader program object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Shader.Window">
            <summary>
            Gets the window containing the graphics context on which to render
            the shader program.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Shader.Update(System.Action)">
            <summary>
            Schedules an action for execution when running the shader program.
            Any render operations called as part of the action will execute
            in the context of this shader program.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to invoke when running the shader program.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.Shader.CreateShaderState(System.Collections.Generic.IEnumerable{Bonsai.Shaders.Configuration.StateConfiguration},System.Collections.Generic.IEnumerable{Bonsai.Shaders.Configuration.UniformConfiguration},System.Collections.Generic.IEnumerable{Bonsai.Shaders.Configuration.BufferBindingConfiguration},Bonsai.Shaders.Configuration.FramebufferConfiguration)">
            <summary>
            Initializes the shader state object used to specify the render state,
            uniform values, buffer bindings and framebuffer configuration to use when
            running the shader program.
            </summary>
            <param name="renderState">
            The collection of configuration objects specifying the render states required
            for running the shader program.
            </param>
            <param name="shaderUniforms">
            The collection of configuration objects specifying the default values of
            uniform variables in the shader program.
            </param>
            <param name="bufferBindings">
            The collection of configuration objects specifying the buffer bindings
            to set before running the shader.
            </param>
            <param name="framebuffer">
            The configuration state of the framebuffer object used for render to
            texture passes.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.Shader.CreateShader">
            <summary>
            When overridden in a derived class, compiles the shader program and
            returns the program object handle.
            </summary>
            <returns>
            A handle to the shader program object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Shader.OnDispatch">
            <summary>
            Returns any actions that should be executed before running the shader program.
            </summary>
            <returns>
            An <see cref="T:System.Action"/> object to be called before running the shader program.
            If the return value is <see langword="null"/>, no action will be executed.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Shader.Dispatch">
            <summary>
            Loads the shader program into the current render state and dispatches
            all pending render operations.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Shader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Shaders.Shader"/> class.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.Shader.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Shaders.Shader"/> class.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.ShaderException">
            <summary>
            Represents errors that occur when compiling or linking shader programs.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.ShaderException"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.ShaderException"/> class
            with the specified message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="T:Bonsai.Shaders.ShaderManager">
            <summary>
            Provides functionality for accessing shader window resources and
            scheduling actions on the main render loop.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderManager.WindowSource">
            <summary>
            Gets an observable sequence containing the active shader window.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderManager.WindowUpdate(System.Action{Bonsai.Shaders.ShaderWindow})">
            <summary>
            Invokes an action on the next update of the active shader window and
            returns the window instance through an observable sequence.
            </summary>
            <param name="update">
            The action to invoke on the next update of the active shader window.
            </param>
            <returns>
            An observable sequence returning the active <see cref="T:Bonsai.Shaders.ShaderWindow"/>
            instance immediately after the action has been invoked.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ShaderManager.ReserveShader(System.String)">
            <summary>
            Returns an observable sequence that retrieves the shader with the
            specified name.
            </summary>
            <param name="shaderName">
            The name of the shader program to retrieve.
            </param>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.Shader"/>
            class matching the specified name; or an exception, if no such
            shader exists.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ShaderManager.ReserveMaterial(System.String)">
            <summary>
            Returns an observable sequence that retrieves the material shader with
            the specified name.
            </summary>
            <param name="shaderName">
            The name of the shader program to retrieve.
            </param>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.Material"/>
            class matching the specified shader name; or an exception, if no such
            shader exists.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.ShaderManager.ReserveComputeProgram(System.String)">
            <summary>
            Returns an observable sequence that retrieves the compute shader with
            the specified name.
            </summary>
            <param name="shaderName">
            The name of the shader program to retrieve.
            </param>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Shaders.ComputeProgram"/>
            class matching the specified shader name; or an exception, if no such
            shader exists.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.ShaderNameConverter">
            <summary>
            Provides a type converter to convert a shader name to and from other
            representations. It also provides a mechanism to find existing shaders
            which have been declared in the workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.ShaderNameConverter"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.ShaderResources">
            <summary>
            Represents an operator that creates a collection of shader resources to
            be loaded into the resource manager.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderResources.Shaders">
            <summary>
            Gets the collection of shader resources to be loaded into the resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderResources.GetResources">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.ShaderWindow">
            <summary>
            Creates and renders a window using the specified resources and a programmable
            shader pipeline.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.#ctor(Bonsai.Shaders.Configuration.ShaderWindowSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.ShaderWindow"/> class using
            the specified window configuration settings.
            </summary>
            <param name="configuration">
            The configuration settings used to initialize the shader window.
            </param>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.Viewport">
            <summary>
            Gets or sets the active viewport for rendering, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.Scissor">
            <summary>
            Gets or sets the active scissor box, in normalized coordinates. Any fragments
            falling outside the scissor box will be discarded.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.Shaders">
            <summary>
            Gets the collection of shaders specifying the active render pipeline.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.ResourceManager">
            <summary>
            Gets the resource manager used to load and release sets of render
            resources to the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.ClientSize">
            <summary>
            Gets or sets the size of the OpenGL surface in window coordinates.
            The coordinates are specified in device-dependent pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.Width">
            <summary>
            Gets or sets the width of the OpenGL surface in window coordinates.
            The coordinates are specified in device-dependent pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.ShaderWindow.Height">
            <summary>
            Gets or sets the height of the OpenGL surface in window coordinates.
            The coordinates are specified in device-dependent pixels.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.Update(System.Action)">
            <summary>
            Queues a render command or state update.
            </summary>
            <param name="action">
            The action that will execute when the next frame is rendered.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnLoad(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnKeyDown(OpenTK.Input.KeyboardKeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnUpdateFrame(OpenTK.FrameEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnRenderFrame(OpenTK.FrameEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ShaderWindow.OnUnload(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.StoreImage">
            <summary>
            Represents an operator that writes each image in the sequence to a
            texture object.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImage.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImage.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImage.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImage.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImage.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.StoreImage.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Writes each image in an observable sequence to a texture object.
            </summary>
            <param name="source">
            The sequence of images to write into the texture.
            </param>
            <returns>
            An observable sequence returning the <see cref="T:Bonsai.Shaders.Texture"/> object
            on which each image is stored, whenever the <paramref name="source"/>
            sequence emits a new image.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.StoreImageSequence">
            <summary>
            Represents an operator that writes a sequence of images to a texture array.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal pixel format of the texture.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.WrapS">
            <summary>
            Gets or sets a value specifying wrapping parameters for the column
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.WrapT">
            <summary>
            Gets or sets a value specifying wrapping parameters for the row
            coordinates of the texture sampler.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.MinFilter">
            <summary>
            Gets or sets a value specifying the texture minification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.MagFilter">
            <summary>
            Gets or sets a value specifying the texture magnification filter.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.StoreImageSequence.PlaybackRate">
            <summary>
            Gets or sets the default rate at which to playback the stored
            image sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.StoreImageSequence.Process(System.IObservable{OpenCV.Net.IplImage[]})">
            <summary>
            Writes each array of images in an observable sequence into a new
            texture array.
            </summary>
            <param name="source">
            A sequence of arrays of <see cref="T:OpenCV.Net.IplImage"/> objects used to
            initialize the texture array.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.Texture"/> objects where each texture
            stores the corresponding array of images in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.StoreImageSequence.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Writes an observable sequence of images to a texture array.
            </summary>
            <param name="source">
            The sequence of images to be stored in the texture array.
            </param>
            <returns>
            An observable sequence containing the <see cref="T:Bonsai.Shaders.Texture"/> object
            used to store all the images in the <paramref name="source"/> sequence.
            The initialized texture array is returned only when the image sequence
            is completed.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.Texture">
            <summary>
            Represents a texture object containing one or more images with the
            same image format.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.Texture"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Texture.Id">
            <summary>
            Gets the handle to the texture object.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Texture.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Shaders.Texture"/> class.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.TextureArray">
            <summary>
            Represents an array of texture objects.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.TextureArray"/> class
            with the specified number of texture objects.
            </summary>
            <param name="length">
            The total number of texture objects in the array.
            </param>
        </member>
        <member name="P:Bonsai.Shaders.TextureArray.Item(System.Int32)">
            <summary>
            Gets the texture object at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the texture object to get.
            </param>
            <returns>
            The handle to the texture object at the specified index.
            </returns>
        </member>
        <member name="P:Bonsai.Shaders.TextureArray.Length">
            <summary>
            Gets the total number of texture objects in the array.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureArray.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Shaders.TextureArray"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all texture objects in
            the array.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the texture objects
            in the array.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.TextureNameConverter">
            <summary>
            Provides a type converter to convert a texture name to and from other
            representations. It also provides a mechanism to find existing textures
            which have been declared in the workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.TextureNameConverter"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.TextureResources">
            <summary>
            Represents an operator that creates a collection of texture resources to
            be loaded into the resource manager.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.TextureResources.Textures">
            <summary>
            Gets the collection of texture resources to be loaded into the resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TextureResources.GetResources">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Timer">
            <summary>
            Represents an operator that generates an observable sequence that
            periodically produces a value after the specified initial relative
            due time has elapsed, using the render loop timing.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Timer.DueTime">
            <summary>
            Gets or sets the relative time at which to produce the first value.
            If this value is less than or equal to zero, the timer will fire as
            soon as possible.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Timer.Period">
            <summary>
            Gets or sets the period to produce subsequent values. If this value
            is undefined or equal to zero the timer will only fire once.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Timer.DueTimeXml">
            <summary>
            Gets or sets an XML representation of the due time for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Timer.PeriodXml">
            <summary>
            Gets or sets an XML representation of the period for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Timer.Generate">
            <summary>
            Generates an observable sequence that periodically produces a value
            after the specified initial relative due time has elapsed, using the
            render loop timing.
            </summary>
            <returns>
            An observable sequence of integer values counting how many times the
            timer has fired.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Timer.Generate(System.IObservable{Bonsai.Shaders.FrameEvent})">
            <summary>
            Generates an observable sequence that periodically produces a value
            after the specified initial relative due time has elapsed, using the
            timing from the specified sequence of frame events.
            </summary>
            <param name="source">
            The sequence of frame events controlling the timing of the timer.
            </param>
            <returns>
            An observable sequence of integer values counting how many times the
            timer has fired.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Timer.Generate(System.IObservable{Bonsai.Shaders.TimeStep})">
            <summary>
            Generates an observable sequence that periodically produces a value
            after the specified initial relative due time has elapsed, using the
            timing from the specified sequence of time steps.
            </summary>
            <param name="source">
            The sequence of time steps controlling the timing of the timer.
            </param>
            <returns>
            An observable sequence of integer values counting how many times the
            timer has fired.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.Timer.Generate(System.IObservable{System.Double})">
            <summary>
            Generates an observable sequence that periodically produces a value
            after the specified initial relative due time has elapsed, using the
            timing from the specified sequence of time steps in seconds.
            </summary>
            <param name="source">
            The sequence of time steps, in seconds, controlling the timing of
            the timer.
            </param>
            <returns>
            An observable sequence of integer values counting how many times the
            timer has fired.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.TimeStep">
            <summary>
            Represents the amount of time elapsed since the last update.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.TimeStep.Zero">
            <summary>
            Represents the zero <see cref="T:Bonsai.Shaders.TimeStep"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.Shaders.TimeStep.ElapsedTime">
            <summary>
            The amount of elapsed time since the last update, in seconds.
            </summary>
            <remarks>
            This field is useful for fixed-step deterministic state updates, where
            each step follows the target update or render refresh rates.
            </remarks>
        </member>
        <member name="F:Bonsai.Shaders.TimeStep.ElapsedRealTime">
            <summary>
            The amount of elapsed time since the last update, in seconds, following
            the host computer clock.
            </summary>
            <remarks>
            This field can be used to measure the real-time jitter of the update
            and render loops, or in variable-step state updates.
            </remarks>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.TimeStep"/> structure
            using the specified fixed-step elapsed time and variable-step elapsed
            clock time.
            </summary>
            <param name="elapsedTime">
            The amount of elapsed time since the last update, in seconds.
            </param>
            <param name="elapsedRealTime">
            The amount of elapsed time since the last update, in seconds, following
            the host computer clock.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Equals(Bonsai.Shaders.TimeStep)">
            <summary>
            Returns a value indicating whether this instance is equal to the
            specified <see cref="T:Bonsai.Shaders.TimeStep"/> structure.
            </summary>
            <param name="other">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> object to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents
            the same timing values as this instance; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the specified object is a <see cref="T:Bonsai.Shaders.TimeStep"/>
            structure with the same timing values as this <see cref="T:Bonsai.Shaders.TimeStep"/> object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:Bonsai.Shaders.TimeStep"/>
            structure and has the same timing values as this object; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Bonsai.Shaders.TimeStep"/> value.
            </summary>
            <returns>
            An integer value that specifies a hash value for this
            <see cref="T:Bonsai.Shaders.TimeStep"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Shaders.TimeStep"/> value.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing all the timing values of this
            <see cref="T:Bonsai.Shaders.TimeStep"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Add(Bonsai.Shaders.TimeStep@,Bonsai.Shaders.TimeStep@,Bonsai.Shaders.TimeStep@)">
            <summary>
            Adds two <see cref="T:Bonsai.Shaders.TimeStep"/> values together and stores the result
            in a return value.
            </summary>
            <param name="left">The first <see cref="T:Bonsai.Shaders.TimeStep"/> to add.</param>
            <param name="right">The second <see cref="T:Bonsai.Shaders.TimeStep"/> to add.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:Bonsai.Shaders.TimeStep"/> object
            representing the sum of the <paramref name="left"/> and
            <paramref name="right"/> values.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Subtract(Bonsai.Shaders.TimeStep@,Bonsai.Shaders.TimeStep@,Bonsai.Shaders.TimeStep@)">
            <summary>
            Subtracts the second <see cref="T:Bonsai.Shaders.TimeStep"/> value from the first
            and stores the result in a return value.
            </summary>
            <param name="left">The first <see cref="T:Bonsai.Shaders.TimeStep"/> value.</param>
            <param name="right">The second <see cref="T:Bonsai.Shaders.TimeStep"/> value.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:Bonsai.Shaders.TimeStep"/> object
            representing the difference between the <paramref name="left"/> and
            <paramref name="right"/> values.
            </param>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Add(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Adds two <see cref="T:Bonsai.Shaders.TimeStep"/> values together.
            </summary>
            <param name="left">The first <see cref="T:Bonsai.Shaders.TimeStep"/> to add.</param>
            <param name="right">The second <see cref="T:Bonsai.Shaders.TimeStep"/> to add.</param>
            <returns>
            A new <see cref="T:Bonsai.Shaders.TimeStep"/> object representing the sum of the
            <paramref name="left"/> and <paramref name="right"/> values.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.Subtract(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Subtracts the second <see cref="T:Bonsai.Shaders.TimeStep"/> value from the first.
            </summary>
            <param name="left">The first <see cref="T:Bonsai.Shaders.TimeStep"/> value.</param>
            <param name="right">The second <see cref="T:Bonsai.Shaders.TimeStep"/> value.</param>
            <returns>
            A new <see cref="T:Bonsai.Shaders.TimeStep"/> object representing the difference between
            the <paramref name="left"/> and <paramref name="right"/> values.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.op_Equality(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Shaders.TimeStep"/> values are equal.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the left-hand side of the
            equality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the right-hand side of the
            equality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            have equal timing values; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.op_Inequality(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Shaders.TimeStep"/> values are different.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the left-hand side of the
            inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the right-hand side of the
            inequality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            differ in any of their timing values; <see langword="false"/> if
            <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.op_Addition(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Adds two <see cref="T:Bonsai.Shaders.TimeStep"/> values together.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the left-hand side of the
            addition operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the right-hand side of the
            addition operator.
            </param>
            <returns>
            A new <see cref="T:Bonsai.Shaders.TimeStep"/> object representing the sum of the
            <paramref name="left"/> and <paramref name="right"/> values.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.TimeStep.op_Subtraction(Bonsai.Shaders.TimeStep,Bonsai.Shaders.TimeStep)">
            <summary>
            Subtracts the second <see cref="T:Bonsai.Shaders.TimeStep"/> value from the first.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the left-hand side of the
            subtraction operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Shaders.TimeStep"/> value on the right-hand side of the
            subtraction operator.
            </param>
            <returns>
            A new <see cref="T:Bonsai.Shaders.TimeStep"/> object representing the difference between
            the <paramref name="left"/> and <paramref name="right"/> values.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.TransformRelative">
            <summary>
            Represents an operator that applies a model matrix transform specifying
            relative position, rotation and scale to every transform in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TransformRelative.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Shaders.TransformRelative"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.TransformRelative.Position">
            <summary>
            Gets or sets the relative position of the model, in the local
            coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.TransformRelative.Rotation">
            <summary>
            Gets or sets the quaternion representing the relative rotation of
            the model, in the local coordinate frame.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.TransformRelative.Scale">
            <summary>
            Gets or sets the relative scale vector applied to the model, in the
            local coordinate frame.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.TransformRelative.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for applying a model matrix transform
            specifying relative position, rotation and scale.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Translate">
            <summary>
            Represents an operator that applies a translation along the specified
            axes to every transform in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Translate.X">
            <summary>
            Gets or sets the translation along the x-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Translate.Y">
            <summary>
            Gets or sets the translation along the y-axis.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.Translate.Z">
            <summary>
            Gets or sets the translation along the z-axis.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Translate.CreateTransform(OpenTK.Matrix4@)">
            <summary>
            Initializes a transform matrix for applying a translation along the
            specified axes.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.Transpose">
            <summary>
            Represents an operator that calculates the transpose of every matrix
            in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.Transpose.Process(System.IObservable{OpenTK.Matrix3})">
            <summary>
            Calculates the transpose of every 3x3 matrix in an observable sequence.
            </summary>
            <param name="source">The sequence of 3x3 matrices to transpose.</param>
            <returns>The sequence of transposed 3x3 matrices.</returns>
        </member>
        <member name="M:Bonsai.Shaders.Transpose.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Calculates the transpose of every 4x4 matrix in an observable sequence.
            </summary>
            <param name="source">The sequence of 4x4 matrices to transpose.</param>
            <returns>The sequence of transposed 4x4 matrices.</returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateClearColorState">
            <summary>
            Represents an operator that updates the clear color state of the
            shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateClearColorState.ClearColor">
            <summary>
            Gets or sets the color used to clear the framebuffer before rendering.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateClearColorState.ClearColorHtml">
            <summary>
            Gets or sets an XML representation of the clear color for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateClearColorState.Process``1(System.IObservable{``0})">
            <summary>
            Updates the clear color state of the shader window whenever an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to update the clear
            color state of the shader window.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            clear color of the shader window whenever the sequence emits a notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateFrame">
            <summary>
            Represents an operator that generates a sequence of events produced
            whenever it is time to update the render state.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateFrame.Generate">
            <summary>
            Generates an observable sequence that emits a notification whenever
            it is time to update the render state.
            </summary>
            <returns>
            A sequence of <see cref="T:Bonsai.Shaders.FrameEvent"/> objects produced whenever it
            is time to update the render state.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateRenderState">
            <summary>
            Represents an operator that updates the render state of the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateRenderState.RenderState">
            <summary>
            Gets the collection of configuration objects specifying the render
            states to assign for subsequent operations.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateRenderState.Process(System.IObservable{Bonsai.Shaders.ShaderWindow})">
            <summary>
            Updates the render state of each shader window in an observable sequence.
            </summary>
            <param name="source">
            The sequence of shader windows to update.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            render state of each shader window in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateRenderState.Process(System.IObservable{Bonsai.Resources.ResourceConfigurationCollection})">
            <summary>
            Updates the render state of the shader window contained in each set
            of resources in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects
            containing the shader windows to update.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            render state of the shader window contained in each set of resources
            in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateRenderState.Process``1(System.IObservable{``0})">
            <summary>
            Updates the render state of the shader window whenever an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used to update the render
            state of the shader window.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            render state of the shader window whenever the sequence emits a
            notification.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateScissorState">
            <summary>
            Represents an operator that updates the active scissor box in the shader
            window. Any fragments falling outside the scissor box will be discarded.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateScissorState.X">
            <summary>
            Gets or sets the x-coordinate of the lower left corner of the scissor box.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateScissorState.Y">
            <summary>
            Gets or sets the y-coordinate of the lower left corner of the scissor box.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateScissorState.Width">
            <summary>
            Gets or sets the width of the scissor box, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateScissorState.Height">
            <summary>
            Gets or sets the height of the scissor box, in normalized coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateScissorState.Process``1(System.IObservable{``0})">
            <summary>
            Updates the active scissor box in the shader window whenever an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to update the active scissor box.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            active scissor box in the shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateTexture">
            <summary>
            Represents an operator that updates the pixel store of the specified
            texture target from a sequence of images.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateTexture.TextureName">
            <summary>
            Gets or sets the name of the texture to update.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateTexture.TextureTarget">
            <summary>
            Gets or sets a value specifying the texture target to update.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateTexture.InternalFormat">
            <summary>
            Gets or sets a value specifying the internal storage format of the
            texture target.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateTexture.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Updates the pixel store of the specified texture target from an
            observable sequence of images.
            </summary>
            <param name="source">
            The sequence of images used to update the texture target.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            pixel store of the specified texture target.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateUniform">
            <summary>
            Represents an operator that updates the value of a uniform variable on the
            specified shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateUniform.UniformName">
            <summary>
            Gets or sets the name of the uniform variable to update.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateUniform.ShaderName">
            <summary>
            Gets or sets the name of the shader program.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Graphics.OpenGL4.TextureUnit})">
            <summary>
            Updates a sampler 2D uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Int32})">
            <summary>
            Updates a 32-bit integer uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Single})">
            <summary>
            Updates a single-precision floating-point uniform variable on the
            specified shader with the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Double})">
            <summary>
            Updates a double-precision floating-point uniform variable on the
            specified shader with the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Updates an ivec2 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Updates a vec2 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Updates a dvec2 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32}})">
            <summary>
            Updates an ivec3 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single}})">
            <summary>
            Updates a vec3 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double}})">
            <summary>
            Updates a dvec3 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32}})">
            <summary>
            Updates an ivec4 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single,System.Single}})">
            <summary>
            Updates a vec4 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Updates a dvec4 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Vector2})">
            <summary>
            Updates a vec2 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Vector3})">
            <summary>
            Updates a vec3 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Vector4})">
            <summary>
            Updates a vec4 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Quaternion})">
            <summary>
            Updates a vec4 uniform variable on the specified shader with
            the quaternion values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of quaternion values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Matrix2})">
            <summary>
            Updates a mat2 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Matrix3})">
            <summary>
            Updates a mat3 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateUniform.Process(System.IObservable{OpenTK.Matrix4})">
            <summary>
            Updates a mat4 uniform variable on the specified shader with
            the values from an observable sequence.
            </summary>
            <param name="source">
            The sequence of values used to update the uniform variable.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of assigning the
            uniform variable to the values of the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateVertexBuffer">
            <summary>
            Represents an operator that updates the vertex buffer data used by the
            specified mesh geometry.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateVertexBuffer.MeshName">
            <summary>
            Gets or sets the name of the mesh geometry to update.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateVertexBuffer.DrawMode">
            <summary>
            Gets or sets a value specifying the kind of primitives to render
            with the vertex buffer data.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateVertexBuffer.Usage">
            <summary>
            Gets or sets a value specifying the expected usage pattern of the
            vertex buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateVertexBuffer.VertexAttributes">
            <summary>
            Gets the collection of vertex attributes specifying how to interpret
            the vertex array data.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{``0[]})">
            <summary>
            Updates the specified mesh geometry using each of the array data in
            an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            A sequence of vertex array data used to update the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the arrays in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{System.Tuple{``0[],System.Byte[]}})">
            <summary>
            Updates the specified mesh geometry using vertex and 8-bit index data
            from an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            The sequence of pairs of vertex and 8-bit index data used to update the
            mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the pairs of vertex and index data in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{System.Tuple{``0[],System.Int16[]}})">
            <summary>
            Updates the specified mesh geometry using vertex and signed 16-bit
            index data from an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            The sequence of pairs of vertex and signed 16-bit index data used to update
            the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the pairs of vertex and index data in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{System.Tuple{``0[],System.UInt16[]}})">
            <summary>
            Updates the specified mesh geometry using vertex and unsigned 16-bit
            index data from an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            The sequence of pairs of vertex and unsigned 16-bit index data used to update
            the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the pairs of vertex and index data in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{System.Tuple{``0[],System.Int32[]}})">
            <summary>
            Updates the specified mesh geometry using vertex and signed 32-bit
            index data from an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            The sequence of pairs of vertex and signed 32-bit index data used to update
            the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the pairs of vertex and index data in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process``1(System.IObservable{System.Tuple{``0[],System.UInt32[]}})">
            <summary>
            Updates the specified mesh geometry using vertex and unsigned 32-bit
            index data from an observable sequence.
            </summary>
            <typeparam name="TVertex">
            The type of the vertex elements used to render each primitive.
            </typeparam>
            <param name="source">
            The sequence of pairs of vertex and unsigned 32-bit index data used to update
            the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the pairs of vertex and index data in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Shaders.UpdateVertexBuffer.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Updates the specified mesh geometry using each of the matrix data in
            an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the vertex array
            data used to update the mesh geometry.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of scheduling
            an update operation where mesh geometry data is updated using each
            of the matrices in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.UpdateViewportState">
            <summary>
            Represents an operator that updates the active viewport in the shader window.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateViewportState.X">
            <summary>
            Gets or sets the x-coordinate of the lower left corner of the viewport.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateViewportState.Y">
            <summary>
            Gets or sets the y-coordinate of the lower left corner of the viewport.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateViewportState.Width">
            <summary>
            Gets or sets the width of the viewport rectangle, in normalized coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.UpdateViewportState.Height">
            <summary>
            Gets or sets the height of the viewport rectangle, in normalized coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.UpdateViewportState.Process``1(System.IObservable{``0})">
            <summary>
            Updates the active viewport in the shader window whenever an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to update the active viewport.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of updating the
            active viewport in the shader window.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.VertexAttributeMapping">
            <summary>
            Represents the format of a user-defined input value to a vertex shader.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.VertexAttributeMapping.Size">
            <summary>
            Gets or sets a value specifying the number of components in the vertex
            attribute.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.VertexAttributeMapping.Normalized">
            <summary>
            Gets or sets a value specifying whether fixed-point data values should
            be normalized or converted directly before they are accessed.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.VertexAttributeMapping.Type">
            <summary>
            Gets or sets a value specifying the data type of each component in
            the vertex attribute.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.VertexAttributeMapping.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.VertexAttributeMappingCollection">
            <summary>
            Represents a collection of <see cref="T:Bonsai.Shaders.VertexAttributeMapping"/> objects.
            </summary>
        </member>
        <member name="T:Bonsai.Shaders.ViewportEffect">
            <summary>
            Provides functionality for rendering a fullscreen effect using a fragment
            shader pass.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.ViewportEffect.OnDispatch">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Shaders.ViewportEffect.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Shaders.WarpPerspective">
            <summary>
            Represents an operator that creates a warp perspective transform matrix
            for planar projection mapping.
            </summary>
        </member>
        <member name="P:Bonsai.Shaders.WarpPerspective.Destination">
            <summary>
            Gets or sets the coordinates of the four quadrangle vertices specifying
            the perspective transform.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.WarpPerspective.Process``1(System.IObservable{``0})">
            <summary>
            Creates a warp perspective transform matrix for planar projection
            mapping whenever an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of notifications used to create the perspective transform.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenTK.Matrix4"/> objects representing
            the perspective transform.
            </returns>
        </member>
        <member name="T:Bonsai.Shaders.WindowClosed">
            <summary>
            Represents an operator that generates a sequence of events produced
            whenever the shader window is closed.
            </summary>
        </member>
        <member name="M:Bonsai.Shaders.WindowClosed.Generate">
            <summary>
            Generates an observable sequence that emits a notification whenever
            the shader window is closed.
            </summary>
            <returns>
            A sequence of event objects produced whenever the shader window is closed.
            </returns>
        </member>
    </members>
</doc>
